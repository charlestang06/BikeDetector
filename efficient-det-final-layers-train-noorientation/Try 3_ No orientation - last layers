{"cells":[{"cell_type":"markdown","metadata":{"id":"license"},"source":["##### *Copyright 2021 Google LLC*\n","*Licensed under the Apache License, Version 2.0 (the \"License\")*"]},{"cell_type":"code","execution_count":1,"metadata":{"cellView":"both","id":"rKwqeqWBXANA","executionInfo":{"status":"ok","timestamp":1668300993967,"user_tz":300,"elapsed":2,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."]},{"cell_type":"code","source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)\n","\n","from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('Not using a high-RAM runtime')\n","else:\n","  print('You are using a high-RAM runtime!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPpTl1FQiogN","executionInfo":{"status":"ok","timestamp":1668301000747,"user_tz":300,"elapsed":807,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"54c69d32-10c6-43f3-b0bb-60a726940e3c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Sun Nov 13 00:56:37 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   54C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n","Your runtime has 13.6 gigabytes of available RAM\n","\n","Not using a high-RAM runtime\n"]}]},{"cell_type":"markdown","metadata":{"id":"Gb7qyhNL1yWt"},"source":["# Retrain EfficientDet for the Edge TPU with TensorFlow Lite Model Maker"]},{"cell_type":"markdown","source":[],"metadata":{"id":"oYMA2djOXxiV"}},{"cell_type":"code","source":["# jupyter notebook --NotebookApp.allow_origin='https://colab.research.google.com' --port=8888 --NotebookApp.port_retries=0"],"metadata":{"id":"MoKI0j8hXwrf","executionInfo":{"status":"ok","timestamp":1668301003476,"user_tz":300,"elapsed":221,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"u2eVTwlmIOIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668301455722,"user_tz":300,"elapsed":450837,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"bec30899-7cd2-49b7-a1b6-e72ca4da78d7"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"2vvAObmTqglq"},"source":["## Import the required packages"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"qhl8lqVamEty","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668301562477,"user_tz":300,"elapsed":100655,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"7fd42e24-3f00-4200-9a6e-7985c94cc2c1"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 577 kB 820 kB/s \n","\u001b[K     |████████████████████████████████| 87 kB 2.5 MB/s \n","\u001b[K     |████████████████████████████████| 1.1 MB 3.6 MB/s \n","\u001b[K     |████████████████████████████████| 1.3 MB 5.0 MB/s \n","\u001b[K     |████████████████████████████████| 238 kB 4.0 MB/s \n","\u001b[K     |████████████████████████████████| 60.9 MB 1.3 MB/s \n","\u001b[K     |████████████████████████████████| 10.9 MB 18.5 MB/s \n","\u001b[K     |████████████████████████████████| 840 kB 43.6 MB/s \n","\u001b[K     |████████████████████████████████| 128 kB 50.2 MB/s \n","\u001b[K     |████████████████████████████████| 3.4 MB 35.2 MB/s \n","\u001b[K     |████████████████████████████████| 77 kB 6.8 MB/s \n","\u001b[K     |████████████████████████████████| 25.3 MB 1.4 MB/s \n","\u001b[K     |████████████████████████████████| 497.9 MB 38 kB/s \n","\u001b[K     |████████████████████████████████| 352 kB 66.5 MB/s \n","\u001b[K     |████████████████████████████████| 462 kB 59.9 MB/s \n","\u001b[K     |████████████████████████████████| 5.8 MB 46.4 MB/s \n","\u001b[K     |████████████████████████████████| 1.4 MB 59.9 MB/s \n","\u001b[K     |████████████████████████████████| 40 kB 5.5 MB/s \n","\u001b[K     |████████████████████████████████| 216 kB 73.4 MB/s \n","\u001b[?25h  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -q tflite-model-maker"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"XtxiUeZEiXpt","executionInfo":{"status":"ok","timestamp":1668301876069,"user_tz":300,"elapsed":6100,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["import numpy as np\n","import os\n","\n","from tflite_model_maker.config import ExportFormat\n","from tflite_model_maker import model_spec\n","from tflite_model_maker import object_detector\n","\n","import tensorflow as tf\n","assert tf.__version__.startswith('2')\n","\n","tf.get_logger().setLevel('ERROR')\n","from absl import logging\n","logging.set_verbosity(logging.ERROR)"]},{"cell_type":"markdown","metadata":{"id":"H0XM-oIfhgQ7"},"source":["## Load the training data\n"]},{"cell_type":"markdown","metadata":{"id":"ZljJ25RAnj5x"},"source":["### (Optional) Load your own Pascal VOC dataset"]},{"cell_type":"markdown","metadata":{"id":"Ei5BahmPn_wR"},"source":["To use your custom dataset, you need to modify a few variables here, such as your ZIP filename, your label map, and the path to your images/annotations:"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"mz_suhWiqc7A","executionInfo":{"status":"ok","timestamp":1668301906794,"user_tz":300,"elapsed":228,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["# Your labels map as a dictionary (zero is reserved):\n","label_map = {1: 'Cyclist'} "]},{"cell_type":"markdown","metadata":{"id":"d8Rh3IWRb0xw"},"source":["Now you're ready to train the model with your custom dataset. But before you run the notebook, you should also skip to the [Export to TensorFlow Lite](#scrollTo=_yB_XMpqGlLs) section and change the `TFLITE_FILENAME` and `LABLES_FILENAME` for your exported files.\n","\n","Then run the whole notebook by clicking **Runtime > Run all**."]},{"cell_type":"code","execution_count":8,"metadata":{"id":"KWROlVNA54xZ","executionInfo":{"status":"ok","timestamp":1668301909157,"user_tz":300,"elapsed":213,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["# We need to instantiate a separate DataLoader for each split dataset\n","os.chdir('/content/drive/My Drive/STEM_1/dataset')\n","train_data = object_detector.DataLoader(tfrecord_file_patten='/content/drive/My Drive/STEM_1/dataset/onlybike/train1.record', size=12000, label_map=label_map)\n","validation_data = object_detector.DataLoader(\n","      '/content/drive/My Drive/STEM_1/dataset/onlybike/test1.record', size=700, label_map=label_map)"]},{"cell_type":"markdown","metadata":{"id":"S8clx0KPutCM"},"source":["## Select the model spec"]},{"cell_type":"markdown","metadata":{"id":"vn61LJ9QbOPi"},"source":["Model Maker supports the EfficientDet-Lite family of object detection models that are compatible with the Edge TPU. (EfficientDet-Lite is derived from [EfficientDet](https://ai.googleblog.com/2020/04/efficientdet-towards-scalable-and.html), which offers state-of-the-art accuracy in a small model size). There are several model sizes you can choose from:\n","\n","|| Model architecture | Size(MB)* | Latency(ms)** | Average Precision*** |\n","|-|--------------------|-----------|---------------|----------------------|\n","|| EfficientDet-Lite0 | 5.7       | 37.4            | 30.4%               |\n","|| EfficientDet-Lite1 | 7.6       | 56.3            | 34.3%               |\n","|| EfficientDet-Lite2 | 10.2      | 104.6           | 36.0%               |\n","|| EfficientDet-Lite3 | 14.4      | 107.6           | 39.4%               |\n","| <td colspan=4><br><i>* File size of the compiled Edge TPU models. <br/>** Latency measured on a desktop CPU with a Coral USB Accelerator. <br/>*** Average Precision is the mAP (mean Average Precision) on the COCO 2017 validation dataset.</i></td> |\n","\n","Beware that the Lite2 and Lite3 models do not fit onto the Edge TPU's onboard memory, so you'll see even greater latency when using those, due to the cost of fetching data from the host system memory. Maybe this extra latency is okay for your application, but if it's not and you require the precision of the larger models, then you can [pipeline the model across multiple Edge TPUs](https://coral.ai/docs/edgetpu/pipeline/) (more about this when we compile the model below)."]},{"cell_type":"code","execution_count":12,"metadata":{"id":"SM9gePHw9Jv1","executionInfo":{"status":"ok","timestamp":1668301973226,"user_tz":300,"elapsed":434,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["spec = object_detector.EfficientDetLite1Spec(model_dir='/content/drive/My Drive/STEM_1/dataset/try3/last_layers')"]},{"cell_type":"markdown","metadata":{"id":"rnCzdzs0-Rbo"},"source":["The [`EfficientDetLite0Spec`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/EfficientDetLite0Spec) constructor also supports several arguments that specify training options, such as the max number of detections (default is 25 for the TF Lite model) and whether to use Cloud TPUs for training. You can also use the constructor to specify the number of training epochs and the batch size, but you can also specify those in the next step."]},{"cell_type":"code","source":["spec.config.var_freeze_expr = '(efficientnet|fpn_cells|resample_p6)'"],"metadata":{"id":"N4dujr--g8ap","executionInfo":{"status":"ok","timestamp":1668301975135,"user_tz":300,"elapsed":293,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5qjq2UEHCLUi"},"source":["## Create and train the model"]},{"cell_type":"markdown","metadata":{"id":"2uZkLR6N6gDR"},"source":["Now we need to create our model according to the model spec, load our dataset into the model, specify training parameters, and begin training. \n","\n","Using Model Maker, we accomplished all of that with [`create()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/create):"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"kwlYdTcg63xy","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6af74c01-a8cb-4332-e7ac-980148696922","executionInfo":{"status":"ok","timestamp":1668318612818,"user_tz":300,"elapsed":16568175,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","3000/3000 [==============================] - 1116s 355ms/step - det_loss: 0.3071 - cls_loss: 0.1898 - box_loss: 0.0023 - reg_l2_loss: 0.0719 - loss: 0.3789 - learning_rate: 0.0065 - gradient_norm: 2.8886\n","Epoch 2/15\n","3000/3000 [==============================] - 1078s 359ms/step - det_loss: 0.2215 - cls_loss: 0.1459 - box_loss: 0.0015 - reg_l2_loss: 0.0724 - loss: 0.2939 - learning_rate: 0.0049 - gradient_norm: 2.3350\n","Epoch 3/15\n","3000/3000 [==============================] - 1148s 383ms/step - det_loss: 0.2107 - cls_loss: 0.1388 - box_loss: 0.0014 - reg_l2_loss: 0.0725 - loss: 0.2831 - learning_rate: 0.0046 - gradient_norm: 2.1949\n","Epoch 4/15\n","3000/3000 [==============================] - 1061s 354ms/step - det_loss: 0.1880 - cls_loss: 0.1280 - box_loss: 0.0012 - reg_l2_loss: 0.0724 - loss: 0.2604 - learning_rate: 0.0043 - gradient_norm: 2.0767\n","Epoch 5/15\n","3000/3000 [==============================] - 1078s 359ms/step - det_loss: 0.1833 - cls_loss: 0.1252 - box_loss: 0.0012 - reg_l2_loss: 0.0722 - loss: 0.2555 - learning_rate: 0.0038 - gradient_norm: 2.0153\n","Epoch 6/15\n","3000/3000 [==============================] - 1169s 390ms/step - det_loss: 0.1794 - cls_loss: 0.1219 - box_loss: 0.0012 - reg_l2_loss: 0.0720 - loss: 0.2514 - learning_rate: 0.0033 - gradient_norm: 1.9816\n","Epoch 7/15\n","3000/3000 [==============================] - 1089s 363ms/step - det_loss: 0.1672 - cls_loss: 0.1157 - box_loss: 0.0010 - reg_l2_loss: 0.0717 - loss: 0.2389 - learning_rate: 0.0028 - gradient_norm: 1.9544\n","Epoch 8/15\n","3000/3000 [==============================] - 1090s 363ms/step - det_loss: 0.1651 - cls_loss: 0.1142 - box_loss: 0.0010 - reg_l2_loss: 0.0715 - loss: 0.2366 - learning_rate: 0.0022 - gradient_norm: 1.9288\n","Epoch 9/15\n","3000/3000 [==============================] - 1155s 385ms/step - det_loss: 0.1610 - cls_loss: 0.1112 - box_loss: 9.9614e-04 - reg_l2_loss: 0.0713 - loss: 0.2323 - learning_rate: 0.0017 - gradient_norm: 1.9266\n","Epoch 10/15\n","3000/3000 [==============================] - 1073s 358ms/step - det_loss: 0.1503 - cls_loss: 0.1056 - box_loss: 8.9320e-04 - reg_l2_loss: 0.0711 - loss: 0.2214 - learning_rate: 0.0012 - gradient_norm: 1.9026\n","Epoch 11/15\n","3000/3000 [==============================] - 1111s 370ms/step - det_loss: 0.1531 - cls_loss: 0.1066 - box_loss: 9.2956e-04 - reg_l2_loss: 0.0710 - loss: 0.2241 - learning_rate: 7.3594e-04 - gradient_norm: 1.9371\n","Epoch 12/15\n","3000/3000 [==============================] - 1092s 364ms/step - det_loss: 0.1470 - cls_loss: 0.1029 - box_loss: 8.8162e-04 - reg_l2_loss: 0.0709 - loss: 0.2179 - learning_rate: 3.8763e-04 - gradient_norm: 1.8790\n","Epoch 13/15\n","3000/3000 [==============================] - 1079s 360ms/step - det_loss: 0.1458 - cls_loss: 0.1027 - box_loss: 8.6227e-04 - reg_l2_loss: 0.0709 - loss: 0.2167 - learning_rate: 1.4524e-04 - gradient_norm: 1.8989\n","Epoch 14/15\n","3000/3000 [==============================] - 1137s 379ms/step - det_loss: 0.1582 - cls_loss: 0.1088 - box_loss: 9.8825e-04 - reg_l2_loss: 0.0709 - loss: 0.2290 - learning_rate: 2.0932e-05 - gradient_norm: 2.0316\n","Epoch 15/15\n","3000/3000 [==============================] - 1076s 358ms/step - det_loss: 0.1427 - cls_loss: 0.1006 - box_loss: 8.4223e-04 - reg_l2_loss: 0.0709 - loss: 0.2136 - learning_rate: 2.0932e-05 - gradient_norm: 1.8939\n"]}],"source":["model = object_detector.create(train_data=train_data, \n","                               model_spec=spec, \n","                               epochs=15, \n","                               batch_size=4, \n","                               train_whole_model=False)"]},{"cell_type":"markdown","metadata":{"id":"3n5-o3vvGfnJ"},"source":["## Evaluate the model"]},{"cell_type":"markdown","metadata":{"id":"-BzCHLWJ6h7q"},"source":["Now we'll use the test dataset to evaluate how well the model performs with data it has never seen before.\n","\n","The [`evaluate()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#evaluate) method provides output in the style of [COCO evaluation metrics](https://cocodataset.org/#detection-eval):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8xmnl6Yy7ARn"},"outputs":[],"source":["model.evaluate(validation_data)"]},{"cell_type":"markdown","metadata":{"id":"PEon9xd2BDS_"},"source":["Because the default batch size for [EfficientDetLite models](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/EfficientDetSpec) is 64, this needs only 1 step to go through all 25 images in the salad test set. You can also specify the `batch_size` argument when you call [`evaluate()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#evaluate)."]},{"cell_type":"markdown","metadata":{"id":"_yB_XMpqGlLs"},"source":["## Export to TensorFlow Lite"]},{"cell_type":"markdown","metadata":{"id":"CgCDMe0e6jlT"},"source":["Next, we'll export the model to the TensorFlow Lite format. By default, the [`export()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#export) method performs [full integer post-training quantization](https://www.tensorflow.org/lite/performance/post_training_quantization#full_integer_quantization), which is exactly what we need for compatibility with the Edge TPU. (Model Maker uses the same dataset we gave to our model spec as a representative dataset, which is required for full-int quantization.)\n","\n","We just need to specify the export directory and format. By default, it exports to TF Lite, but we also want a labels file, so we declare both:"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"2Cu9cxX5Qu-e","executionInfo":{"status":"ok","timestamp":1668318613727,"user_tz":300,"elapsed":31,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["TFLITE_FILENAME = 'efficientdet-lite-bikes.tflite'\n","LABELS_FILENAME = 'bikes-labels.txt'"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"rKd6qk7TbxYO","executionInfo":{"status":"ok","timestamp":1668318962476,"user_tz":300,"elapsed":348776,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["model.export(export_dir='/content/drive/My Drive/STEM_1/dataset/try3', tflite_filename=TFLITE_FILENAME, label_filename=LABELS_FILENAME,\n","             export_format=[ExportFormat.TFLITE, ExportFormat.LABEL])"]},{"cell_type":"markdown","metadata":{"id":"b94hZ-exOCRB"},"source":["### Evaluate the TF Lite model"]},{"cell_type":"markdown","metadata":{"id":"ZQpahAIBqBPp"},"source":["Exporting the model to TensorFlow Lite can affect the model accuracy, due to the reduced numerical precision from quantization and because the original TensorFlow model uses per-class [non-max supression (NMS)](https://www.coursera.org/lecture/convolutional-neural-networks/non-max-suppression-dvrjH) for post-processing, while the TF Lite model uses global NMS, which is faster but less accurate.\n","\n","Therefore you should always evaluate the exported TF Lite model and be sure it still meets your requirements:"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"RS3Ell_lqH4e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668322595730,"user_tz":300,"elapsed":3632487,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"c3a6fbee-8a36-45f6-f6f3-2be578d17914"},"outputs":[{"output_type":"stream","name":"stdout","text":["700/700 [==============================] - 3630s 5s/step\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AP': 0.80249125,\n"," 'AP50': 0.97707677,\n"," 'AP75': 0.9283836,\n"," 'APs': 0.011864407,\n"," 'APm': 0.4651496,\n"," 'APl': 0.8242985,\n"," 'ARmax1': 0.4780303,\n"," 'ARmax10': 0.83325756,\n"," 'ARmax100': 0.83560604,\n"," 'ARs': 0.7,\n"," 'ARm': 0.6148515,\n"," 'ARl': 0.854023,\n"," 'AP_/Cyclist': 0.80249125}"]},"metadata":{},"execution_count":18}],"source":["model.evaluate_tflite(\"/content/drive/My Drive/STEM_1/dataset/try3/\"+TFLITE_FILENAME, validation_data)"]},{"cell_type":"markdown","metadata":{"id":"Ph88z7PdOeX7"},"source":["### Try the TFLite model"]},{"cell_type":"markdown","metadata":{"id":"me6_RwPZqNhX"},"source":["Just to be sure of things, let's run the model ourselves with an image from the test set. "]},{"cell_type":"markdown","metadata":{"id":"ZBecI78ZaxsO"},"source":["To simplify our code, we'll use the [PyCoral API](https://coral.ai/docs/reference/py/):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TmgtGBqua1N3"},"outputs":[],"source":["! python3 -m pip install --extra-index-url https://google-coral.github.io/py-repo/ pycoral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GkXtipXKqXp4"},"outputs":[],"source":["from PIL import Image\n","from PIL import ImageDraw\n","from PIL import ImageFont\n","\n","import tflite_runtime.interpreter as tflite \n","from pycoral.adapters import common\n","from pycoral.adapters import detect\n","from pycoral.utils.dataset import read_label_file\n","\n","def draw_objects(draw, objs, scale_factor, labels):\n","  \"\"\"Draws the bounding box and label for each object.\"\"\"\n","  COLORS = np.random.randint(0, 255, size=(len(labels), 3), dtype=np.uint8)\n","  for obj in objs:\n","    bbox = obj.bbox\n","    color = tuple(int(c) for c in COLORS[obj.id])\n","    draw.rectangle([(bbox.xmin * scale_factor, bbox.ymin * scale_factor),\n","                    (bbox.xmax * scale_factor, bbox.ymax * scale_factor)],\n","                   outline=color, width=3)\n","    font = ImageFont.truetype(\"LiberationSans-Regular.ttf\", size=15)\n","    draw.text((bbox.xmin * scale_factor + 4, bbox.ymin * scale_factor + 4),\n","              '%s\\n%.2f' % (labels.get(obj.id, obj.id), obj.score),\n","              fill=color, font=font)\n","\n","# Load the TF Lite model\n","labels = read_label_file('/content/drive/My Drive/STEM_1/dataset/export/' + LABELS_FILENAME)\n","interpreter = tflite.Interpreter('/content/drive/My Drive/STEM_1/dataset/export/' + TFLITE_FILENAME)\n","interpreter.allocate_tensors()\n","\n","# Resize the image for input\n","image = Image.open('/content/drive/My Drive/bike2.jpg')\n","_, scale = common.set_resized_input(\n","    interpreter, image.size, lambda size: image.resize(size, Image.ANTIALIAS))\n","\n","# Run inference\n","interpreter.invoke()\n","objs = detect.get_objects(interpreter, score_threshold=0.2, image_scale=scale)\n","\n","# Resize again to a reasonable size for display\n","display_width = 500\n","scale_factor = display_width / image.width\n","height_ratio = image.height / image.width\n","image = image.resize((display_width, int(display_width * height_ratio)))\n","draw_objects(ImageDraw.Draw(image), objs, scale_factor, labels)\n","image"]},{"cell_type":"markdown","metadata":{"id":"oxgWQyYOqZha"},"source":["## Compile for the Edge TPU\n"]},{"cell_type":"markdown","metadata":{"id":"A0QLiwCj9Pw6"},"source":["First we need to download the Edge TPU Compiler:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Oy3QIn_YqaRP"},"outputs":[],"source":["! curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n","\n","! echo \"deb https://packages.cloud.google.com/apt coral-edgetpu-stable main\" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list\n","\n","! sudo apt-get update\n","\n","! sudo apt-get install edgetpu-compiler"]},{"cell_type":"markdown","metadata":{"id":"qRWewhqFqeL_"},"source":["Before compiling the `.tflite` file for the Edge TPU, it's important to consider whether your model will fit into the Edge TPU memory. \n","\n","The Edge TPU has approximately 8 MB of SRAM for [caching model paramaters](https://coral.ai/docs/edgetpu/compiler/#parameter-data-caching), so any model close to or over 8 MB will not fit onto the Edge TPU memory. That means the inference times are longer, because some model parameters must be fetched from the host system memory.\n","\n","One way to elimiate the extra latency is to use [model pipelining](https://coral.ai/docs/edgetpu/pipeline/), which splits the model into segments that can run on separate Edge TPUs in series. This can significantly reduce the latency for big models.\n","\n","The following table provides recommendations for the number of Edge TPUs to use with each EfficientDet-Lite model.\n","\n","| Model architecture | Minimum TPUs | Recommended TPUs\n","|--------------------|-------|-------|\n","| EfficientDet-Lite0 | 1     | 1     |\n","| EfficientDet-Lite1 | 1     | 1     |\n","| EfficientDet-Lite2 | 1     | 2     |\n","| EfficientDet-Lite3 | 2     | 2     |\n","| EfficientDet-Lite4 | 2     | 3     |\n","\n","If you need extra Edge TPUs for your model, then update `NUMBER_OF_TPUS` here:"]},{"cell_type":"code","source":["TFLITE_FILENAME = '/content/drive/My Drive/STEM_1/dataset/export/efficientdet-lite-bikes.tflite'\n","NUMBER_OF_TPUS = 1"],"metadata":{"id":"GSnkSl8_JYjS"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LZdonJGCqieU"},"outputs":[],"source":["!edgetpu_compiler $TFLITE_FILENAME -d --num_segments=$NUMBER_OF_TPUS"]},{"cell_type":"markdown","metadata":{"id":"O2CjkduY02DF"},"source":["**Beware when using multiple segments:** The Edge TPU Comiler divides the model such that all segments have roughly equal amounts of parameter data, but that does not mean all segments have the same latency. Especially when dividing an SSD model such as EfficientDet, this results in a latency-imbalance between segments, because SSD models have a large post-processing op that actually executes on the CPU, not on the Edge TPU. So although segmenting your model this way is better than running the whole model on just one Edge TPU, we recommend that you segment the EfficientDet-Lite model using our [profiling-based partitioner tool](https://github.com/google-coral/libcoral/tree/master/coral/tools/partitioner#profiling-based-partitioner-for-the-edge-tpu-compiler), which measures each segment's latency on the Edge TPU and then iteratively adjusts the segmentation sizes to provide balanced latency between all segments."]},{"cell_type":"markdown","metadata":{"id":"KyBBvyqx0XRn"},"source":["## Download the files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M43URVgg0ZcB"},"outputs":[],"source":["from google.colab import files\n","TFLITE_FILENAME = 'efficientdet-lite-bikes.tflite'\n","files.download(TFLITE_FILENAME)\n","files.download(TFLITE_FILENAME.replace('.tflite', '_edgetpu.tflite'))\n","files.download(LABELS_FILENAME)"]},{"cell_type":"markdown","metadata":{"id":"8fYwl4Rt8myF"},"source":["## Run the model on the Edge TPU"]},{"cell_type":"markdown","metadata":{"id":"Dv2Ingvx8pcI"},"source":["You can now run the model with acceleration on the Edge TPU.\n","\n","First, download an image of a salad on your device with an Edge TPU. For example, you can use the same one we tested above: \n","\n","```\n","wget https://storage.googleapis.com/cloud-ml-data/img/openimage/3/2520/3916261642_0a504acd60_o.jpg -O salad.jpg\n","```\n","\n","And then make sure you have [installed the PyCoral API](https://coral.ai/software/#pycoral-api).\n","\n","Now run an inference using [this example code for the PyCoral API](https://github.com/google-coral/pycoral/blob/master/examples/detect_image.py). Just clone the GitHub repo and run the example, passing it the model files from this tutorial:\n","\n","```\n","git clone https://github.com/google-coral/pycoral\n","\n","cd pycoral/examples/\n","\n","python3 detect_image.py \\\n","  --model efficientdet-lite-salads_edgetpu.tflite \\\n","  --labels salad-labels.txt \\\n","  --input salad.jpg \\\n","  --output salad_result.jpg\n","```\n"]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"1DRNsZW-6-CQsR7p0i_49Z1dolM_8xyPN","timestamp":1667792635346},{"file_id":"https://github.com/google-coral/tutorials/blob/master/retrain_efficientdet_model_maker_tf2.ipynb","timestamp":1667756742492}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"gpuClass":"standard","accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}