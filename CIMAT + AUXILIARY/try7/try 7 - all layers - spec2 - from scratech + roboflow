{"cells":[{"cell_type":"markdown","metadata":{"id":"license"},"source":["##### *Copyright 2021 Google LLC*\n","*Licensed under the Apache License, Version 2.0 (the \"License\")*"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"both","id":"rKwqeqWBXANA"},"outputs":[],"source":["# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."]},{"cell_type":"code","source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)\n","\n","from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('Not using a high-RAM runtime')\n","else:\n","  print('You are using a high-RAM runtime!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPpTl1FQiogN","executionInfo":{"status":"ok","timestamp":1671457089431,"user_tz":300,"elapsed":1884,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"7c404c6b-cfb7-47a0-ab72-cabc0c50cc0c"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Dec 19 13:38:06 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  A100-SXM4-40GB      Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   30C    P0    54W / 400W |      0MiB / 40536MiB |      0%      Default |\n","|                               |                      |             Disabled |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n","Your runtime has 89.6 gigabytes of available RAM\n","\n","You are using a high-RAM runtime!\n"]}]},{"cell_type":"markdown","metadata":{"id":"Gb7qyhNL1yWt"},"source":["# Retrain EfficientDet for the Edge TPU with TensorFlow Lite Model Maker"]},{"cell_type":"markdown","source":[],"metadata":{"id":"oYMA2djOXxiV"}},{"cell_type":"code","source":["# jupyter notebook --NotebookApp.allow_origin='https://colab.research.google.com' --port=8888 --NotebookApp.port_retries=0"],"metadata":{"id":"MoKI0j8hXwrf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"u2eVTwlmIOIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671457112802,"user_tz":300,"elapsed":23375,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"032c1253-b859-4264-8f15-7cfcc61a1fdd"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"2vvAObmTqglq"},"source":["## Import the required packages"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"qhl8lqVamEty","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671457191812,"user_tz":300,"elapsed":76588,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"90936d35-b165-4280-8e09-ec344aa593a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 577 kB 14.5 MB/s \n","\u001b[K     |████████████████████████████████| 3.4 MB 72.3 MB/s \n","\u001b[K     |████████████████████████████████| 88 kB 9.0 MB/s \n","\u001b[K     |████████████████████████████████| 77 kB 7.6 MB/s \n","\u001b[K     |████████████████████████████████| 840 kB 83.0 MB/s \n","\u001b[K     |████████████████████████████████| 238 kB 88.2 MB/s \n","\u001b[K     |████████████████████████████████| 60.8 MB 138.6 MB/s \n","\u001b[K     |████████████████████████████████| 1.1 MB 79.0 MB/s \n","\u001b[K     |████████████████████████████████| 128 kB 99.8 MB/s \n","\u001b[K     |████████████████████████████████| 10.9 MB 82.8 MB/s \n","\u001b[K     |████████████████████████████████| 1.3 MB 81.0 MB/s \n","\u001b[K     |████████████████████████████████| 25.3 MB 70.0 MB/s \n","\u001b[K     |████████████████████████████████| 498.0 MB 11 kB/s \n","\u001b[K     |████████████████████████████████| 352 kB 98.0 MB/s \n","\u001b[K     |████████████████████████████████| 1.4 MB 84.5 MB/s \n","\u001b[K     |████████████████████████████████| 5.8 MB 84.9 MB/s \n","\u001b[K     |████████████████████████████████| 462 kB 93.4 MB/s \n","\u001b[K     |████████████████████████████████| 40 kB 54 kB/s \n","\u001b[K     |████████████████████████████████| 216 kB 101.0 MB/s \n","\u001b[?25h  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","xarray 2022.12.0 requires packaging>=21.3, but you have packaging 20.9 which is incompatible.\u001b[0m\n"]}],"source":["!pip install -q tflite-model-maker"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"XtxiUeZEiXpt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671457197177,"user_tz":300,"elapsed":5384,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"ad44cf48-fa64-4cfa-fc7c-abdb5eaac3ad"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/tensorflow_addons/utils/ensure_tf_install.py:53: UserWarning: Tensorflow Addons supports using Python ops for all Tensorflow versions above or equal to 2.9.0 and strictly below 2.12.0 (nightly versions are not supported). \n"," The versions of TensorFlow you are currently using is 2.8.4 and is not supported. \n","Some things might work, some things might not.\n","If you were to encounter a bug, do not file an issue.\n","If you want to make sure you're using a tested and supported configuration, either change the TensorFlow version or the TensorFlow Addons's version. \n","You can find the compatibility matrix in TensorFlow Addon's readme:\n","https://github.com/tensorflow/addons\n","  warnings.warn(\n"]}],"source":["import numpy as np\n","import os\n","\n","from tflite_model_maker.config import ExportFormat\n","from tflite_model_maker import model_spec\n","from tflite_model_maker import object_detector\n","\n","import tensorflow as tf\n","assert tf.__version__.startswith('2')\n","\n","tf.get_logger().setLevel('ERROR')\n","from absl import logging\n","logging.set_verbosity(logging.ERROR)\n","\n","import tensorflow as tf\n","from tflite_model_maker.config import QuantizationConfig\n","from tflite_model_maker import model_spec\n","from tflite_model_maker import object_detector\n","from tflite_model_maker.object_detector import DataLoader\n","from tensorflow_examples.lite.model_maker.third_party.efficientdet.keras import train\n","from tensorflow_examples.lite.model_maker.third_party.efficientdet.keras import train_lib"]},{"cell_type":"markdown","metadata":{"id":"H0XM-oIfhgQ7"},"source":["## Load the training data\n"]},{"cell_type":"markdown","metadata":{"id":"ZljJ25RAnj5x"},"source":["### (Optional) Load your own Pascal VOC dataset"]},{"cell_type":"markdown","metadata":{"id":"Ei5BahmPn_wR"},"source":["To use your custom dataset, you need to modify a few variables here, such as your ZIP filename, your label map, and the path to your images/annotations:"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"mz_suhWiqc7A","executionInfo":{"status":"ok","timestamp":1671457197178,"user_tz":300,"elapsed":20,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["# Your labels map as a dictionary (zero is reserved):\n","label_map = {1: 'Cyclist'} "]},{"cell_type":"code","source":["batch_size = 32 #or whatever batch size you want\n","epochs = 60\n","checkpoint_dir = \"/content/drive/My Drive/STEM_1/dataset/try7/all_layers\" #whatever your checkpoint directory is"],"metadata":{"id":"D-XuHJfr8phM","executionInfo":{"status":"ok","timestamp":1671457197178,"user_tz":300,"elapsed":18,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d8Rh3IWRb0xw"},"source":["Now you're ready to train the model with your custom dataset. But before you run the notebook, you should also skip to the [Export to TensorFlow Lite](#scrollTo=_yB_XMpqGlLs) section and change the `TFLITE_FILENAME` and `LABLES_FILENAME` for your exported files.\n","\n","Then run the whole notebook by clicking **Runtime > Run all**."]},{"cell_type":"code","execution_count":28,"metadata":{"id":"KWROlVNA54xZ","executionInfo":{"status":"ok","timestamp":1671462745727,"user_tz":300,"elapsed":535,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["# We need to instantiate a separate DataLoader for each split dataset\n","os.chdir('/content/drive/My Drive/STEM_1/dataset')\n","train_data = object_detector.DataLoader(tfrecord_file_patten='/content/drive/My Drive/STEM_1/dataset/roboflow/train.tfrecord', size=14259, label_map=label_map)\n","validation_data = object_detector.DataLoader(\n","      '/content/drive/My Drive/STEM_1/dataset/roboflow/test.tfrecord', size=1178, label_map=label_map)"]},{"cell_type":"markdown","metadata":{"id":"S8clx0KPutCM"},"source":["## Select the model spec"]},{"cell_type":"markdown","metadata":{"id":"vn61LJ9QbOPi"},"source":["Model Maker supports the EfficientDet-Lite family of object detection models that are compatible with the Edge TPU. (EfficientDet-Lite is derived from [EfficientDet](https://ai.googleblog.com/2020/04/efficientdet-towards-scalable-and.html), which offers state-of-the-art accuracy in a small model size). There are several model sizes you can choose from:\n","\n","|| Model architecture | Size(MB)* | Latency(ms)** | Average Precision*** |\n","|-|--------------------|-----------|---------------|----------------------|\n","|| EfficientDet-Lite0 | 5.7       | 37.4            | 30.4%               |\n","|| EfficientDet-Lite1 | 7.6       | 56.3            | 34.3%               |\n","|| EfficientDet-Lite2 | 10.2      | 104.6           | 36.0%               |\n","|| EfficientDet-Lite3 | 14.4      | 107.6           | 39.4%               |\n","| <td colspan=4><br><i>* File size of the compiled Edge TPU models. <br/>** Latency measured on a desktop CPU with a Coral USB Accelerator. <br/>*** Average Precision is the mAP (mean Average Precision) on the COCO 2017 validation dataset.</i></td> |"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"SM9gePHw9Jv1","executionInfo":{"status":"ok","timestamp":1671457339236,"user_tz":300,"elapsed":3,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["spec = object_detector.EfficientDetLite2Spec(\n","    hparams='grad_checkpoint=True, learning_rate=0.2', \n","    model_dir=checkpoint_dir, \n","    epochs=epochs, \n","    batch_size=batch_size,\n","    steps_per_execution=1, \n","    moving_average_decay=0,\n","    var_freeze_expr='(efficientnet|fpn_cells|resample_p6)',\n","    tflite_max_detections=25, \n","    strategy=None, \n","    tpu=None, \n","    gcp_project=None,\n","    tpu_zone=None, \n","    use_xla=False, \n","    profile=False, \n","    debug=False, \n","    tf_random_seed=111111,\n","    verbose=1\n",")"]},{"cell_type":"markdown","metadata":{"id":"5qjq2UEHCLUi"},"source":["## Specify Configurations"]},{"cell_type":"markdown","metadata":{"id":"2uZkLR6N6gDR"},"source":["Now we need to create our model according to the model spec, load our dataset into the model, specify training parameters, and begin training. \n","\n","Using Model Maker, we accomplished all of that with [`create()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/create):"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"kwlYdTcg63xy","executionInfo":{"status":"ok","timestamp":1671462790645,"user_tz":300,"elapsed":17510,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["detector = object_detector.create(train_data, \n","                                model_spec=spec, \n","                                batch_size=batch_size, \n","                                train_whole_model=True, \n","                                validation_data=validation_data,\n","                                epochs = epochs,\n","                                do_train = False\n","                                )"]},{"cell_type":"code","source":["train_ds, steps_per_epoch, _ = detector._get_dataset_and_steps(train_data, batch_size, is_training = True)\n","validation_ds, validation_steps, val_json_file = detector._get_dataset_and_steps(validation_data, batch_size, is_training = False)"],"metadata":{"id":"1Rz7H_G693dI","executionInfo":{"status":"ok","timestamp":1671462791525,"user_tz":300,"elapsed":901,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["model = detector.create_model()"],"metadata":{"id":"xgfZUdCm94O9","executionInfo":{"status":"ok","timestamp":1671462806850,"user_tz":300,"elapsed":15330,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["config = spec.config\n","config.update(\n","    dict(\n","        steps_per_epoch=steps_per_epoch,\n","        eval_samples=batch_size * validation_steps,\n","        val_json_file=val_json_file,\n","        batch_size=batch_size\n","    )\n",")\n","train.setup_model(model, config) #This is the model.compile call basically\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4sJWbuob-GSv","executionInfo":{"status":"ok","timestamp":1671462808305,"user_tz":300,"elapsed":1500,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"96ca726a-580c-4602-c8af-16e3bc69b4ef"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," keras_layer_5 (KerasLayer)  multiple                  5227280   \n","                                                                 \n"," class_net/class-predict (Se  multiple                 3042      \n"," parableConv2D)                                                  \n","                                                                 \n"," box_net/box-predict (Separa  multiple                 5076      \n"," bleConv2D)                                                      \n","                                                                 \n","=================================================================\n","Total params: 5,235,398\n","Trainable params: 5,162,838\n","Non-trainable params: 72,560\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["# Train Model"],"metadata":{"id":"XQ-Papje-NT3"}},{"cell_type":"code","source":["try:\n","  #Option A:\n","  #load the weights from the last successfully completed epoch\n","  latest = tf.train.latest_checkpoint(checkpoint_dir) \n","\n","  #Option B:\n","  #load the weights from a specific checkpoint\n","  #latest = specific_checkpoint_dir\n","\n","  completed_epochs = int(latest.split(\"/\")[-1].split(\"-\")[1]) #the epoch the training was at when the training was last interrupted\n","  model.load_weights(latest)\n","\n","  print(\"Checkpoint found {}\".format(latest))\n","except Exception as e:\n","  print(\"Checkpoint not found: \", e)\n","  completed_epochs = 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1qTiWZbE-MnT","executionInfo":{"status":"ok","timestamp":1671462830051,"user_tz":300,"elapsed":3012,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"37638d63-8a4d-40fc-d6fc-40351860c665"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Checkpoint found /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-10\n"]}]},{"cell_type":"code","source":["model.fit(\n","    train_ds,\n","    epochs=epochs,\n","    initial_epoch=completed_epochs, \n","    steps_per_epoch=steps_per_epoch,\n","    validation_data=validation_ds,\n","    validation_steps=validation_steps,\n","    callbacks=train_lib.get_callbacks(config.as_dict(), validation_ds) #This is for saving checkpoints at the end of every epoch\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"2NCtjBgv_xp2","outputId":"43728ee9-efeb-4999-ff76-82f61b34fa6d","executionInfo":{"status":"error","timestamp":1671468954954,"user_tz":300,"elapsed":6121025,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 11/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.4701 - cls_loss: 0.2807 - box_loss: 0.0038 - reg_l2_loss: 0.0851 - loss: 0.5553 - learning_rate: 0.0945 - gradient_norm: 1.1051\n","Epoch 11: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-11\n","445/445 [==============================] - 637s 1s/step - det_loss: 0.4700 - cls_loss: 0.2806 - box_loss: 0.0038 - reg_l2_loss: 0.0851 - loss: 0.5551 - learning_rate: 0.0945 - gradient_norm: 1.1042 - val_det_loss: 0.4599 - val_cls_loss: 0.2925 - val_box_loss: 0.0033 - val_reg_l2_loss: 0.0871 - val_loss: 0.5470\n","Epoch 12/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.4151 - cls_loss: 0.2450 - box_loss: 0.0034 - reg_l2_loss: 0.0884 - loss: 0.5035 - learning_rate: 0.0932 - gradient_norm: 0.8801\n","Epoch 12: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-12\n","445/445 [==============================] - 563s 1s/step - det_loss: 0.4152 - cls_loss: 0.2451 - box_loss: 0.0034 - reg_l2_loss: 0.0884 - loss: 0.5037 - learning_rate: 0.0932 - gradient_norm: 0.8823\n","Epoch 13/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3953 - cls_loss: 0.2338 - box_loss: 0.0032 - reg_l2_loss: 0.0900 - loss: 0.4852 - learning_rate: 0.0918 - gradient_norm: 0.8235\n","Epoch 13: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-13\n","445/445 [==============================] - 554s 1s/step - det_loss: 0.3951 - cls_loss: 0.2337 - box_loss: 0.0032 - reg_l2_loss: 0.0900 - loss: 0.4851 - learning_rate: 0.0918 - gradient_norm: 0.8231\n","Epoch 14/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3782 - cls_loss: 0.2239 - box_loss: 0.0031 - reg_l2_loss: 0.0907 - loss: 0.4689 - learning_rate: 0.0902 - gradient_norm: 0.7714\n","Epoch 14: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-14\n","445/445 [==============================] - 557s 1s/step - det_loss: 0.3782 - cls_loss: 0.2239 - box_loss: 0.0031 - reg_l2_loss: 0.0907 - loss: 0.4689 - learning_rate: 0.0902 - gradient_norm: 0.7714\n","Epoch 15/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3737 - cls_loss: 0.2225 - box_loss: 0.0030 - reg_l2_loss: 0.0914 - loss: 0.4651 - learning_rate: 0.0886 - gradient_norm: 0.7738\n","Epoch 15: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-15\n","445/445 [==============================] - 583s 1s/step - det_loss: 0.3737 - cls_loss: 0.2225 - box_loss: 0.0030 - reg_l2_loss: 0.0914 - loss: 0.4651 - learning_rate: 0.0886 - gradient_norm: 0.7740\n","Epoch 16/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3632 - cls_loss: 0.2160 - box_loss: 0.0029 - reg_l2_loss: 0.0917 - loss: 0.4549 - learning_rate: 0.0869 - gradient_norm: 0.7431\n","Epoch 16: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-16\n","445/445 [==============================] - 558s 1s/step - det_loss: 0.3631 - cls_loss: 0.2160 - box_loss: 0.0029 - reg_l2_loss: 0.0917 - loss: 0.4549 - learning_rate: 0.0869 - gradient_norm: 0.7433\n","Epoch 17/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3584 - cls_loss: 0.2135 - box_loss: 0.0029 - reg_l2_loss: 0.0920 - loss: 0.4503 - learning_rate: 0.0850 - gradient_norm: 0.7528\n","Epoch 17: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-17\n","445/445 [==============================] - 548s 1s/step - det_loss: 0.3584 - cls_loss: 0.2136 - box_loss: 0.0029 - reg_l2_loss: 0.0920 - loss: 0.4504 - learning_rate: 0.0850 - gradient_norm: 0.7526\n","Epoch 18/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3521 - cls_loss: 0.2101 - box_loss: 0.0028 - reg_l2_loss: 0.0921 - loss: 0.4443 - learning_rate: 0.0831 - gradient_norm: 0.7252\n","Epoch 18: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-18\n","445/445 [==============================] - 549s 1s/step - det_loss: 0.3524 - cls_loss: 0.2103 - box_loss: 0.0028 - reg_l2_loss: 0.0921 - loss: 0.4445 - learning_rate: 0.0831 - gradient_norm: 0.7261\n","Epoch 19/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3448 - cls_loss: 0.2050 - box_loss: 0.0028 - reg_l2_loss: 0.0920 - loss: 0.4368 - learning_rate: 0.0810 - gradient_norm: 0.7086\n","Epoch 19: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-19\n","445/445 [==============================] - 551s 1s/step - det_loss: 0.3450 - cls_loss: 0.2051 - box_loss: 0.0028 - reg_l2_loss: 0.0920 - loss: 0.4370 - learning_rate: 0.0810 - gradient_norm: 0.7099\n","Epoch 20/60\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3403 - cls_loss: 0.2040 - box_loss: 0.0027 - reg_l2_loss: 0.0918 - loss: 0.4321 - learning_rate: 0.0789 - gradient_norm: 0.7230\n","Epoch 20: saving model to /content/drive/My Drive/STEM_1/dataset/try7/all_layers/ckpt-20\n","445/445 [==============================] - 573s 1s/step - det_loss: 0.3403 - cls_loss: 0.2040 - box_loss: 0.0027 - reg_l2_loss: 0.0918 - loss: 0.4321 - learning_rate: 0.0789 - gradient_norm: 0.7231\n","Epoch 21/60\n","357/445 [=======================>......] - ETA: 1:50 - det_loss: 0.3439 - cls_loss: 0.2055 - box_loss: 0.0028 - reg_l2_loss: 0.0920 - loss: 0.4360 - learning_rate: 0.0769 - gradient_norm: 0.7314"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-a75afafad437>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m model.fit(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mtrain_ds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0minitial_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompleted_epochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2954\u001b[0m       (graph_function,\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m-> 2956\u001b[0;31m     return graph_function._call_flat(\n\u001b[0m\u001b[1;32m   2957\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1851\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1853\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1854\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    497\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 499\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    500\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     52\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     55\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"_yB_XMpqGlLs"},"source":["## Export to TensorFlow Lite"]},{"cell_type":"markdown","metadata":{"id":"CgCDMe0e6jlT"},"source":["Next, we'll export the model to the TensorFlow Lite format. By default, the [`export()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#export) method performs [full integer post-training quantization](https://www.tensorflow.org/lite/performance/post_training_quantization#full_integer_quantization), which is exactly what we need for compatibility with the Edge TPU. (Model Maker uses the same dataset we gave to our model spec as a representative dataset, which is required for full-int quantization.)\n","\n","We just need to specify the export directory and format. By default, it exports to TF Lite, but we also want a labels file, so we declare both:"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"2Cu9cxX5Qu-e","executionInfo":{"status":"ok","timestamp":1671468957289,"user_tz":300,"elapsed":247,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[],"source":["TFLITE_FILENAME = 'efficientdet-lite-bikes.tflite'\n","LABELS_FILENAME = 'bikes-labels.txt'"]},{"cell_type":"code","source":["export_dir = \"/content/drive/My Drive/STEM_1/dataset/try7\"\n","quant_config = QuantizationConfig.for_float16()\n","detector.model = model\n","detector.export(export_dir = export_dir, tflite_filename=TFLITE_FILENAME, quantization_config = quant_config, label_filename=LABELS_FILENAME,\n","             export_format=[ExportFormat.TFLITE, ExportFormat.LABEL])"],"metadata":{"id":"Ro397qcBAXV2","executionInfo":{"status":"ok","timestamp":1671469020036,"user_tz":300,"elapsed":60786,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b94hZ-exOCRB"},"source":["### Evaluate the TF Lite model"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"RS3Ell_lqH4e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671469181899,"user_tz":300,"elapsed":160351,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"32548d32-6de2-4c26-ce4e-2faba8b49a9b"},"outputs":[{"output_type":"stream","name":"stdout","text":["1095/1178 [==========================>...] - ETA: 11s\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AP': 0.5552533,\n"," 'AP50': 0.93117213,\n"," 'AP75': 0.5929984,\n"," 'APs': 0.24636218,\n"," 'APm': 0.5174672,\n"," 'APl': 0.60758275,\n"," 'ARmax1': 0.33850205,\n"," 'ARmax10': 0.6293739,\n"," 'ARmax100': 0.634172,\n"," 'ARs': 0.42149532,\n"," 'ARm': 0.5975498,\n"," 'ARl': 0.6833509,\n"," 'AP_/Cyclist': 0.5552533}"]},"metadata":{},"execution_count":39}],"source":["detector.evaluate_tflite(\"/content/drive/My Drive/STEM_1/dataset/try7/\"+TFLITE_FILENAME, validation_data)"]},{"cell_type":"code","source":["validation_data = object_detector.DataLoader(\n","      '/content/drive/My Drive/STEM_1/dataset/onlybike/test1.record', size=738, label_map=label_map)\n","detector.evaluate_tflite(\"/content/drive/My Drive/STEM_1/dataset/try7/\"+TFLITE_FILENAME, validation_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"385kOh8BUMgQ","outputId":"a2d3e317-9469-4f37-ad72-4e21e3e27e85"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["738/738 [==============================] - 106s 144ms/step\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AP': 0.67167777,\n"," 'AP50': 0.9550007,\n"," 'AP75': 0.8028406,\n"," 'APs': 0.06666667,\n"," 'APm': 0.3848429,\n"," 'APl': 0.69116443,\n"," 'ARmax1': 0.4218682,\n"," 'ARmax10': 0.72078204,\n"," 'ARmax100': 0.72534394,\n"," 'ARs': 0.2,\n"," 'ARm': 0.5522936,\n"," 'ARl': 0.74059796,\n"," 'AP_/Cyclist': 0.67167777}"]},"metadata":{},"execution_count":40}]}],"metadata":{"colab":{"provenance":[{"file_id":"1DRNsZW-6-CQsR7p0i_49Z1dolM_8xyPN","timestamp":1667792635346},{"file_id":"https://github.com/google-coral/tutorials/blob/master/retrain_efficientdet_model_maker_tf2.ipynb","timestamp":1667756742492}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"gpuClass":"premium","accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}