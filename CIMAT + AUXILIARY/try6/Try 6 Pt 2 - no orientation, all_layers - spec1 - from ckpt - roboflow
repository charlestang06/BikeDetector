{"cells":[{"cell_type":"markdown","metadata":{"id":"license"},"source":["##### *Copyright 2021 Google LLC*\n","*Licensed under the Apache License, Version 2.0 (the \"License\")*"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"both","id":"rKwqeqWBXANA"},"outputs":[],"source":["# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."]},{"cell_type":"code","source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)\n","\n","from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('Not using a high-RAM runtime')\n","else:\n","  print('You are using a high-RAM runtime!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPpTl1FQiogN","executionInfo":{"status":"ok","timestamp":1671150992360,"user_tz":300,"elapsed":1252,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"61d04fb7-0178-4945-f6ef-a5c4e96fbbb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fri Dec 16 00:36:31 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  A100-SXM4-40GB      Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   29C    P0    53W / 400W |      0MiB / 40536MiB |      0%      Default |\n","|                               |                      |             Disabled |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n","Your runtime has 89.6 gigabytes of available RAM\n","\n","You are using a high-RAM runtime!\n"]}]},{"cell_type":"markdown","metadata":{"id":"Gb7qyhNL1yWt"},"source":["# Retrain EfficientDet for the Edge TPU with TensorFlow Lite Model Maker"]},{"cell_type":"markdown","source":[],"metadata":{"id":"oYMA2djOXxiV"}},{"cell_type":"code","source":["# jupyter notebook --NotebookApp.allow_origin='https://colab.research.google.com' --port=8888 --NotebookApp.port_retries=0"],"metadata":{"id":"MoKI0j8hXwrf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"u2eVTwlmIOIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671151008009,"user_tz":300,"elapsed":15524,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"39c5d235-5c85-4c9f-b064-7328c87bbaee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"2vvAObmTqglq"},"source":["## Import the required packages"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qhl8lqVamEty","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671151085914,"user_tz":300,"elapsed":77908,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"6bac21fa-ae83-4e4d-aa4a-c60265231b61"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 577 kB 4.6 MB/s \n","\u001b[K     |████████████████████████████████| 77 kB 7.9 MB/s \n","\u001b[K     |████████████████████████████████| 128 kB 109.0 MB/s \n","\u001b[K     |████████████████████████████████| 238 kB 99.9 MB/s \n","\u001b[K     |████████████████████████████████| 1.3 MB 93.3 MB/s \n","\u001b[K     |████████████████████████████████| 840 kB 83.4 MB/s \n","\u001b[K     |████████████████████████████████| 3.4 MB 87.4 MB/s \n","\u001b[K     |████████████████████████████████| 10.9 MB 72.8 MB/s \n","\u001b[K     |████████████████████████████████| 60.8 MB 253 kB/s \n","\u001b[K     |████████████████████████████████| 88 kB 7.9 MB/s \n","\u001b[K     |████████████████████████████████| 1.1 MB 23.8 MB/s \n","\u001b[K     |████████████████████████████████| 25.3 MB 23.2 MB/s \n","\u001b[K     |████████████████████████████████| 498.0 MB 9.6 kB/s \n","\u001b[K     |████████████████████████████████| 352 kB 99.8 MB/s \n","\u001b[K     |████████████████████████████████| 5.8 MB 100.7 MB/s \n","\u001b[K     |████████████████████████████████| 462 kB 103.5 MB/s \n","\u001b[K     |████████████████████████████████| 1.4 MB 92.9 MB/s \n","\u001b[K     |████████████████████████████████| 40 kB 7.6 MB/s \n","\u001b[K     |████████████████████████████████| 216 kB 99.1 MB/s \n","\u001b[?25h  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -q tflite-model-maker"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XtxiUeZEiXpt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671151092230,"user_tz":300,"elapsed":6321,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"f8df2b41-ab10-4787-9d7e-b9f9240929e9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/tensorflow_addons/utils/ensure_tf_install.py:53: UserWarning: Tensorflow Addons supports using Python ops for all Tensorflow versions above or equal to 2.9.0 and strictly below 2.12.0 (nightly versions are not supported). \n"," The versions of TensorFlow you are currently using is 2.8.4 and is not supported. \n","Some things might work, some things might not.\n","If you were to encounter a bug, do not file an issue.\n","If you want to make sure you're using a tested and supported configuration, either change the TensorFlow version or the TensorFlow Addons's version. \n","You can find the compatibility matrix in TensorFlow Addon's readme:\n","https://github.com/tensorflow/addons\n","  warnings.warn(\n"]}],"source":["import numpy as np\n","import os\n","\n","from tflite_model_maker.config import ExportFormat\n","from tflite_model_maker import model_spec\n","from tflite_model_maker import object_detector\n","\n","import tensorflow as tf\n","assert tf.__version__.startswith('2')\n","\n","tf.get_logger().setLevel('ERROR')\n","from absl import logging\n","logging.set_verbosity(logging.ERROR)\n","\n","import tensorflow as tf\n","from tflite_model_maker.config import QuantizationConfig\n","from tflite_model_maker import model_spec\n","from tflite_model_maker import object_detector\n","from tflite_model_maker.object_detector import DataLoader\n","from tensorflow_examples.lite.model_maker.third_party.efficientdet.keras import train\n","from tensorflow_examples.lite.model_maker.third_party.efficientdet.keras import train_lib"]},{"cell_type":"markdown","metadata":{"id":"H0XM-oIfhgQ7"},"source":["## Load the training data\n"]},{"cell_type":"markdown","metadata":{"id":"ZljJ25RAnj5x"},"source":["### (Optional) Load your own Pascal VOC dataset"]},{"cell_type":"markdown","metadata":{"id":"Ei5BahmPn_wR"},"source":["To use your custom dataset, you need to modify a few variables here, such as your ZIP filename, your label map, and the path to your images/annotations:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mz_suhWiqc7A"},"outputs":[],"source":["# Your labels map as a dictionary (zero is reserved):\n","label_map = {1: 'Cyclist'} "]},{"cell_type":"code","source":["batch_size = 32 #or whatever batch size you want\n","epochs = 100\n","checkpoint_dir = \"/content/drive/My Drive/STEM_1/dataset/try6/last_layers\" #whatever your checkpoint directory is"],"metadata":{"id":"D-XuHJfr8phM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d8Rh3IWRb0xw"},"source":["Now you're ready to train the model with your custom dataset. But before you run the notebook, you should also skip to the [Export to TensorFlow Lite](#scrollTo=_yB_XMpqGlLs) section and change the `TFLITE_FILENAME` and `LABLES_FILENAME` for your exported files.\n","\n","Then run the whole notebook by clicking **Runtime > Run all**."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KWROlVNA54xZ"},"outputs":[],"source":["# We need to instantiate a separate DataLoader for each split dataset\n","os.chdir('/content/drive/My Drive/STEM_1/dataset')\n","train_data = object_detector.DataLoader(tfrecord_file_patten='/content/drive/My Drive/STEM_1/dataset/roboflow/train.tfrecord', size=14259, label_map=label_map)\n","validation_data = object_detector.DataLoader(\n","      '/content/drive/My Drive/STEM_1/dataset/roboflow/test.tfrecord', size=1178, label_map=label_map)"]},{"cell_type":"markdown","metadata":{"id":"S8clx0KPutCM"},"source":["## Select the model spec"]},{"cell_type":"markdown","metadata":{"id":"vn61LJ9QbOPi"},"source":["Model Maker supports the EfficientDet-Lite family of object detection models that are compatible with the Edge TPU. (EfficientDet-Lite is derived from [EfficientDet](https://ai.googleblog.com/2020/04/efficientdet-towards-scalable-and.html), which offers state-of-the-art accuracy in a small model size). There are several model sizes you can choose from:\n","\n","|| Model architecture | Size(MB)* | Latency(ms)** | Average Precision*** |\n","|-|--------------------|-----------|---------------|----------------------|\n","|| EfficientDet-Lite0 | 5.7       | 37.4            | 30.4%               |\n","|| EfficientDet-Lite1 | 7.6       | 56.3            | 34.3%               |\n","|| EfficientDet-Lite2 | 10.2      | 104.6           | 36.0%               |\n","|| EfficientDet-Lite3 | 14.4      | 107.6           | 39.4%               |\n","| <td colspan=4><br><i>* File size of the compiled Edge TPU models. <br/>** Latency measured on a desktop CPU with a Coral USB Accelerator. <br/>*** Average Precision is the mAP (mean Average Precision) on the COCO 2017 validation dataset.</i></td> |"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SM9gePHw9Jv1"},"outputs":[],"source":["spec = object_detector.EfficientDetLite1Spec(\n","    hparams='grad_checkpoint=True, learning_rate=0.2', \n","    model_dir=checkpoint_dir, \n","    epochs=epochs, \n","    batch_size=batch_size,\n","    steps_per_execution=1, \n","    moving_average_decay=0,\n","    var_freeze_expr='(efficientnet|fpn_cells|resample_p6)',\n","    tflite_max_detections=25, \n","    strategy=None, \n","    tpu=None, \n","    gcp_project=None,\n","    tpu_zone=None, \n","    use_xla=False, \n","    profile=False, \n","    debug=False, \n","    tf_random_seed=111111,\n","    verbose=1\n",")"]},{"cell_type":"markdown","metadata":{"id":"5qjq2UEHCLUi"},"source":["## Specify Configurations"]},{"cell_type":"markdown","metadata":{"id":"2uZkLR6N6gDR"},"source":["Now we need to create our model according to the model spec, load our dataset into the model, specify training parameters, and begin training. \n","\n","Using Model Maker, we accomplished all of that with [`create()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/create):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kwlYdTcg63xy"},"outputs":[],"source":["detector = object_detector.create(train_data, \n","                                model_spec=spec, \n","                                batch_size=batch_size, \n","                                train_whole_model=True, \n","                                validation_data=validation_data,\n","                                epochs = epochs,\n","                                do_train = False\n","                                )"]},{"cell_type":"code","source":["train_ds, steps_per_epoch, _ = detector._get_dataset_and_steps(train_data, batch_size, is_training = True)\n","validation_ds, validation_steps, val_json_file = detector._get_dataset_and_steps(validation_data, batch_size, is_training = False)"],"metadata":{"id":"1Rz7H_G693dI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = detector.create_model()"],"metadata":{"id":"xgfZUdCm94O9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["config = spec.config\n","config.update(\n","    dict(\n","        steps_per_epoch=steps_per_epoch,\n","        eval_samples=batch_size * validation_steps,\n","        val_json_file=val_json_file,\n","        batch_size=batch_size\n","    )\n",")\n","train.setup_model(model, config) #This is the model.compile call basically\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4sJWbuob-GSv","executionInfo":{"status":"ok","timestamp":1671151126460,"user_tz":300,"elapsed":2266,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"f344840f-1e72-4353-8a59-7a275f6691f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," keras_layer_1 (KerasLayer)  multiple                  4234512   \n","                                                                 \n"," class_net/class-predict (Se  multiple                 2394      \n"," parableConv2D)                                                  \n","                                                                 \n"," box_net/box-predict (Separa  multiple                 3996      \n"," bleConv2D)                                                      \n","                                                                 \n","=================================================================\n","Total params: 4,240,902\n","Trainable params: 4,177,830\n","Non-trainable params: 63,072\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["# Train Model"],"metadata":{"id":"XQ-Papje-NT3"}},{"cell_type":"code","source":["try:\n","  #Option A:\n","  #load the weights from the last successfully completed epoch\n","  latest = tf.train.latest_checkpoint(checkpoint_dir) \n","\n","  #Option B:\n","  #load the weights from a specific checkpoint\n","  #latest = specific_checkpoint_dir\n","\n","  completed_epochs = int(latest.split(\"/\")[-1].split(\"-\")[1]) #the epoch the training was at when the training was last interrupted\n","  model.load_weights(latest)\n","\n","  print(\"Checkpoint found {}\".format(latest))\n","except Exception as e:\n","  print(\"Checkpoint not found: \", e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1qTiWZbE-MnT","executionInfo":{"status":"ok","timestamp":1671157213112,"user_tz":300,"elapsed":1212,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"479f3310-4aa1-4b13-a439-35b67252fc61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Checkpoint found /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-60\n"]}]},{"cell_type":"code","source":["model.fit(\n","    train_ds,\n","    epochs=epochs,\n","    initial_epoch=completed_epochs, \n","    steps_per_epoch=steps_per_epoch,\n","    validation_data=validation_ds,\n","    validation_steps=validation_steps,\n","    callbacks=train_lib.get_callbacks(config.as_dict(), validation_ds) #This is for saving checkpoints at the end of every epoch\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"2NCtjBgv_xp2","outputId":"fcf50088-003a-44c4-957b-52861df944a7","executionInfo":{"status":"error","timestamp":1671157197290,"user_tz":300,"elapsed":6059201,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 46/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.4187 - cls_loss: 0.2414 - box_loss: 0.0035 - reg_l2_loss: 0.1001 - loss: 0.5188 - learning_rate: 0.0637 - gradient_norm: 1.3167\n","Epoch 46: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-46\n","445/445 [==============================] - 458s 926ms/step - det_loss: 0.4185 - cls_loss: 0.2413 - box_loss: 0.0035 - reg_l2_loss: 0.1001 - loss: 0.5186 - learning_rate: 0.0637 - gradient_norm: 1.3153 - val_det_loss: 0.2944 - val_cls_loss: 0.1795 - val_box_loss: 0.0023 - val_reg_l2_loss: 0.1016 - val_loss: 0.3960\n","Epoch 47/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3904 - cls_loss: 0.2268 - box_loss: 0.0033 - reg_l2_loss: 0.1022 - loss: 0.4926 - learning_rate: 0.0621 - gradient_norm: 1.0455\n","Epoch 47: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-47\n","445/445 [==============================] - 397s 893ms/step - det_loss: 0.3903 - cls_loss: 0.2268 - box_loss: 0.0033 - reg_l2_loss: 0.1022 - loss: 0.4925 - learning_rate: 0.0621 - gradient_norm: 1.0456\n","Epoch 48/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3813 - cls_loss: 0.2208 - box_loss: 0.0032 - reg_l2_loss: 0.1030 - loss: 0.4843 - learning_rate: 0.0606 - gradient_norm: 0.9967\n","Epoch 48: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-48\n","445/445 [==============================] - 398s 895ms/step - det_loss: 0.3813 - cls_loss: 0.2209 - box_loss: 0.0032 - reg_l2_loss: 0.1030 - loss: 0.4843 - learning_rate: 0.0606 - gradient_norm: 0.9964\n","Epoch 49/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3712 - cls_loss: 0.2145 - box_loss: 0.0031 - reg_l2_loss: 0.1036 - loss: 0.4748 - learning_rate: 0.0590 - gradient_norm: 0.9533\n","Epoch 49: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-49\n","445/445 [==============================] - 395s 889ms/step - det_loss: 0.3713 - cls_loss: 0.2146 - box_loss: 0.0031 - reg_l2_loss: 0.1036 - loss: 0.4748 - learning_rate: 0.0590 - gradient_norm: 0.9531\n","Epoch 50/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3622 - cls_loss: 0.2107 - box_loss: 0.0030 - reg_l2_loss: 0.1039 - loss: 0.4660 - learning_rate: 0.0575 - gradient_norm: 0.9253\n","Epoch 50: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-50\n","445/445 [==============================] - 416s 935ms/step - det_loss: 0.3621 - cls_loss: 0.2107 - box_loss: 0.0030 - reg_l2_loss: 0.1039 - loss: 0.4659 - learning_rate: 0.0575 - gradient_norm: 0.9250\n","Epoch 51/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3525 - cls_loss: 0.2053 - box_loss: 0.0029 - reg_l2_loss: 0.1038 - loss: 0.4563 - learning_rate: 0.0559 - gradient_norm: 0.8702\n","Epoch 51: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-51\n","445/445 [==============================] - 397s 893ms/step - det_loss: 0.3523 - cls_loss: 0.2053 - box_loss: 0.0029 - reg_l2_loss: 0.1038 - loss: 0.4561 - learning_rate: 0.0559 - gradient_norm: 0.8696\n","Epoch 52/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3459 - cls_loss: 0.2017 - box_loss: 0.0029 - reg_l2_loss: 0.1035 - loss: 0.4494 - learning_rate: 0.0543 - gradient_norm: 0.8480\n","Epoch 52: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-52\n","445/445 [==============================] - 397s 891ms/step - det_loss: 0.3460 - cls_loss: 0.2018 - box_loss: 0.0029 - reg_l2_loss: 0.1035 - loss: 0.4495 - learning_rate: 0.0543 - gradient_norm: 0.8482\n","Epoch 53/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3420 - cls_loss: 0.1991 - box_loss: 0.0029 - reg_l2_loss: 0.1032 - loss: 0.4452 - learning_rate: 0.0527 - gradient_norm: 0.8396\n","Epoch 53: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-53\n","445/445 [==============================] - 396s 890ms/step - det_loss: 0.3420 - cls_loss: 0.1992 - box_loss: 0.0029 - reg_l2_loss: 0.1032 - loss: 0.4452 - learning_rate: 0.0527 - gradient_norm: 0.8392\n","Epoch 54/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3389 - cls_loss: 0.1980 - box_loss: 0.0028 - reg_l2_loss: 0.1027 - loss: 0.4417 - learning_rate: 0.0511 - gradient_norm: 0.8388\n","Epoch 54: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-54\n","445/445 [==============================] - 397s 893ms/step - det_loss: 0.3389 - cls_loss: 0.1979 - box_loss: 0.0028 - reg_l2_loss: 0.1027 - loss: 0.4416 - learning_rate: 0.0511 - gradient_norm: 0.8383\n","Epoch 55/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3337 - cls_loss: 0.1952 - box_loss: 0.0028 - reg_l2_loss: 0.1022 - loss: 0.4359 - learning_rate: 0.0496 - gradient_norm: 0.8365\n","Epoch 55: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-55\n","445/445 [==============================] - 413s 928ms/step - det_loss: 0.3336 - cls_loss: 0.1952 - box_loss: 0.0028 - reg_l2_loss: 0.1022 - loss: 0.4359 - learning_rate: 0.0496 - gradient_norm: 0.8362\n","Epoch 56/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3249 - cls_loss: 0.1908 - box_loss: 0.0027 - reg_l2_loss: 0.1017 - loss: 0.4266 - learning_rate: 0.0480 - gradient_norm: 0.8095\n","Epoch 56: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-56\n","445/445 [==============================] - 399s 898ms/step - det_loss: 0.3248 - cls_loss: 0.1908 - box_loss: 0.0027 - reg_l2_loss: 0.1017 - loss: 0.4266 - learning_rate: 0.0480 - gradient_norm: 0.8091\n","Epoch 57/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3240 - cls_loss: 0.1910 - box_loss: 0.0027 - reg_l2_loss: 0.1012 - loss: 0.4252 - learning_rate: 0.0464 - gradient_norm: 0.8444\n","Epoch 57: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-57\n","445/445 [==============================] - 396s 890ms/step - det_loss: 0.3238 - cls_loss: 0.1909 - box_loss: 0.0027 - reg_l2_loss: 0.1012 - loss: 0.4250 - learning_rate: 0.0464 - gradient_norm: 0.8443\n","Epoch 58/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3193 - cls_loss: 0.1879 - box_loss: 0.0026 - reg_l2_loss: 0.1007 - loss: 0.4200 - learning_rate: 0.0448 - gradient_norm: 0.8218\n","Epoch 58: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-58\n","445/445 [==============================] - 395s 888ms/step - det_loss: 0.3194 - cls_loss: 0.1880 - box_loss: 0.0026 - reg_l2_loss: 0.1007 - loss: 0.4201 - learning_rate: 0.0448 - gradient_norm: 0.8233\n","Epoch 59/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3177 - cls_loss: 0.1870 - box_loss: 0.0026 - reg_l2_loss: 0.1002 - loss: 0.4179 - learning_rate: 0.0432 - gradient_norm: 0.8246\n","Epoch 59: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-59\n","445/445 [==============================] - 396s 890ms/step - det_loss: 0.3176 - cls_loss: 0.1869 - box_loss: 0.0026 - reg_l2_loss: 0.1002 - loss: 0.4178 - learning_rate: 0.0432 - gradient_norm: 0.8240\n","Epoch 60/100\n","445/445 [==============================] - ETA: 0s - det_loss: 0.3155 - cls_loss: 0.1856 - box_loss: 0.0026 - reg_l2_loss: 0.0997 - loss: 0.4152 - learning_rate: 0.0417 - gradient_norm: 0.8429\n","Epoch 60: saving model to /content/drive/My Drive/STEM_1/dataset/try6/last_layers/ckpt-60\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-a75afafad437>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m model.fit(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mtrain_ds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0minitial_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompleted_epochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1433\u001b[0m           \u001b[0mepoch_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1434\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1435\u001b[0;31m         \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_epoch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1436\u001b[0m         \u001b[0mtraining_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mepoch_logs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1437\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_training\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36mon_epoch_end\u001b[0;34m(self, epoch, logs)\u001b[0m\n\u001b[1;32m    414\u001b[0m     \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_process_logs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mcallback\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 416\u001b[0;31m       \u001b[0mcallback\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_epoch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    417\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    418\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow_examples/lite/model_maker/third_party/efficientdet/keras/train_lib.py\u001b[0m in \u001b[0;36mon_epoch_end\u001b[0;34m(self, epoch, logs)\u001b[0m\n\u001b[1;32m    355\u001b[0m       \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_distribute_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 357\u001b[0;31m         \u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_detections\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    358\u001b[0m       \u001b[0mmetrics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    359\u001b[0m       \u001b[0meval_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m   1310\u001b[0m       fn = autograph.tf_convert(\n\u001b[1;32m   1311\u001b[0m           fn, autograph_ctx.control_status_ctx(), convert_by_default=False)\n\u001b[0;32m-> 1312\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extended\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1314\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mcall_for_each_replica\u001b[0;34m(self, fn, args, kwargs)\u001b[0m\n\u001b[1;32m   2886\u001b[0m       \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2887\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2888\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2889\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2890\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_call_for_each_replica\u001b[0;34m(self, fn, args, kwargs)\u001b[0m\n\u001b[1;32m   3687\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3688\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mReplicaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplica_id_in_sync_group\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3689\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3691\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_reduce_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdestinations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    952\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    953\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 954\u001b[0;31m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    955\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_created_variables\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mALLOW_DYNAMIC_VARIABLE_CREATION\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    956\u001b[0m         raise ValueError(\"Creating variables on a non-first call to a function\"\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2954\u001b[0m       (graph_function,\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m-> 2956\u001b[0;31m     return graph_function._call_flat(\n\u001b[0m\u001b[1;32m   2957\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1851\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1853\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1854\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    497\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 499\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    500\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     52\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     55\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"_yB_XMpqGlLs"},"source":["## Export to TensorFlow Lite"]},{"cell_type":"markdown","metadata":{"id":"CgCDMe0e6jlT"},"source":["Next, we'll export the model to the TensorFlow Lite format. By default, the [`export()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#export) method performs [full integer post-training quantization](https://www.tensorflow.org/lite/performance/post_training_quantization#full_integer_quantization), which is exactly what we need for compatibility with the Edge TPU. (Model Maker uses the same dataset we gave to our model spec as a representative dataset, which is required for full-int quantization.)\n","\n","We just need to specify the export directory and format. By default, it exports to TF Lite, but we also want a labels file, so we declare both:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2Cu9cxX5Qu-e"},"outputs":[],"source":["TFLITE_FILENAME = 'efficientdet-lite-bikes.tflite'\n","LABELS_FILENAME = 'bikes-labels.txt'"]},{"cell_type":"code","source":["export_dir = \"/content/drive/My Drive/STEM_1/dataset/try6\"\n","quant_config = QuantizationConfig.for_float16()\n","detector.model = model\n","detector.export(export_dir = export_dir, tflite_filename=TFLITE_FILENAME, quantization_config = quant_config, label_filename=LABELS_FILENAME,\n","             export_format=[ExportFormat.TFLITE, ExportFormat.LABEL])"],"metadata":{"id":"Ro397qcBAXV2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b94hZ-exOCRB"},"source":["### Evaluate the TF Lite model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RS3Ell_lqH4e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671157405947,"user_tz":300,"elapsed":108966,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"8f7d9a14-a593-4137-cc34-dd9ae786e49f"},"outputs":[{"output_type":"stream","name":"stdout","text":["1095/1178 [==========================>...] - ETA: 7s\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AP': 0.5311011,\n"," 'AP50': 0.90847266,\n"," 'AP75': 0.5617804,\n"," 'APs': 0.15283729,\n"," 'APm': 0.48018998,\n"," 'APl': 0.60342044,\n"," 'ARmax1': 0.32791105,\n"," 'ARmax10': 0.5983616,\n"," 'ARmax100': 0.6039204,\n"," 'ARs': 0.27850467,\n"," 'ARm': 0.55489296,\n"," 'ARl': 0.6744726,\n"," 'AP_/Cyclist': 0.5311011}"]},"metadata":{},"execution_count":20}],"source":["detector.evaluate_tflite(\"/content/drive/My Drive/STEM_1/dataset/try6/\"+TFLITE_FILENAME, validation_data)"]},{"cell_type":"code","source":["validation_data_CIMAT = object_detector.DataLoader(\n","      '/content/drive/My Drive/STEM_1/dataset/onlybike/test1.record', size=738, label_map=label_map)"],"metadata":{"id":"1t__8svZu8-N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["detector.evaluate_tflite(\"/content/drive/My Drive/STEM_1/dataset/try6/\"+TFLITE_FILENAME, validation_data_CIMAT)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9YRkjXkDvMnA","executionInfo":{"status":"ok","timestamp":1671157479642,"user_tz":300,"elapsed":73029,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"3c70a290-139f-43b7-cd2e-47a51bed9264"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["738/738 [==============================] - 70s 95ms/step\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AP': 0.6013433,\n"," 'AP50': 0.9394732,\n"," 'AP75': 0.7217308,\n"," 'APs': 0.0,\n"," 'APm': 0.2412228,\n"," 'APl': 0.62867576,\n"," 'ARmax1': 0.38146272,\n"," 'ARmax10': 0.6608255,\n"," 'ARmax100': 0.6659667,\n"," 'ARs': 0.0,\n"," 'ARm': 0.35688072,\n"," 'ARl': 0.69299763,\n"," 'AP_/Cyclist': 0.6013433}"]},"metadata":{},"execution_count":22}]}],"metadata":{"colab":{"provenance":[{"file_id":"1DRNsZW-6-CQsR7p0i_49Z1dolM_8xyPN","timestamp":1667792635346},{"file_id":"https://github.com/google-coral/tutorials/blob/master/retrain_efficientdet_model_maker_tf2.ipynb","timestamp":1667756742492}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"gpuClass":"premium","accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}