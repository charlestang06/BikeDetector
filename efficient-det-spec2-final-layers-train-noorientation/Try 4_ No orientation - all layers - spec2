{"cells":[{"cell_type":"markdown","metadata":{"id":"license"},"source":["##### *Copyright 2021 Google LLC*\n","*Licensed under the Apache License, Version 2.0 (the \"License\")*"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"both","id":"rKwqeqWBXANA"},"outputs":[],"source":["# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."]},{"cell_type":"code","source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)\n","\n","from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('Not using a high-RAM runtime')\n","else:\n","  print('You are using a high-RAM runtime!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPpTl1FQiogN","executionInfo":{"status":"ok","timestamp":1668865087635,"user_tz":300,"elapsed":288,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"dbbf285e-b9f4-49c9-9fd5-f0fe113c32f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sat Nov 19 13:38:07 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  A100-SXM4-40GB      Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   27C    P0    41W / 400W |      0MiB / 40536MiB |      0%      Default |\n","|                               |                      |             Disabled |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n","Your runtime has 89.6 gigabytes of available RAM\n","\n","You are using a high-RAM runtime!\n"]}]},{"cell_type":"markdown","metadata":{"id":"Gb7qyhNL1yWt"},"source":["# Retrain EfficientDet for the Edge TPU with TensorFlow Lite Model Maker"]},{"cell_type":"markdown","source":[],"metadata":{"id":"oYMA2djOXxiV"}},{"cell_type":"code","source":["# jupyter notebook --NotebookApp.allow_origin='https://colab.research.google.com' --port=8888 --NotebookApp.port_retries=0"],"metadata":{"id":"MoKI0j8hXwrf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"u2eVTwlmIOIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668865103295,"user_tz":300,"elapsed":14653,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"1c4da3d8-5c34-461c-fd69-f6e8e28a7a46"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"2vvAObmTqglq"},"source":["## Import the required packages"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qhl8lqVamEty","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668865180071,"user_tz":300,"elapsed":76793,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"61da811f-329d-41be-8e52-dafbdce18cc5"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 577 kB 4.6 MB/s \n","\u001b[K     |████████████████████████████████| 840 kB 81.6 MB/s \n","\u001b[K     |████████████████████████████████| 1.1 MB 88.0 MB/s \n","\u001b[K     |████████████████████████████████| 60.9 MB 118.7 MB/s \n","\u001b[K     |████████████████████████████████| 1.3 MB 75.9 MB/s \n","\u001b[K     |████████████████████████████████| 128 kB 95.0 MB/s \n","\u001b[K     |████████████████████████████████| 87 kB 8.0 MB/s \n","\u001b[K     |████████████████████████████████| 3.4 MB 77.8 MB/s \n","\u001b[K     |████████████████████████████████| 10.9 MB 82.6 MB/s \n","\u001b[K     |████████████████████████████████| 77 kB 6.8 MB/s \n","\u001b[K     |████████████████████████████████| 238 kB 99.5 MB/s \n","\u001b[K     |████████████████████████████████| 25.3 MB 705 kB/s \n","\u001b[K     |████████████████████████████████| 497.9 MB 4.1 kB/s \n","\u001b[K     |████████████████████████████████| 352 kB 87.1 MB/s \n","\u001b[K     |████████████████████████████████| 1.4 MB 78.4 MB/s \n","\u001b[K     |████████████████████████████████| 462 kB 71.5 MB/s \n","\u001b[K     |████████████████████████████████| 5.8 MB 67.4 MB/s \n","\u001b[K     |████████████████████████████████| 40 kB 6.0 MB/s \n","\u001b[K     |████████████████████████████████| 216 kB 83.8 MB/s \n","\u001b[?25h  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -q tflite-model-maker"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XtxiUeZEiXpt"},"outputs":[],"source":["import numpy as np\n","import os\n","\n","from tflite_model_maker.config import ExportFormat\n","from tflite_model_maker import model_spec\n","from tflite_model_maker import object_detector\n","\n","import tensorflow as tf\n","assert tf.__version__.startswith('2')\n","\n","tf.get_logger().setLevel('ERROR')\n","from absl import logging\n","logging.set_verbosity(logging.ERROR)"]},{"cell_type":"markdown","metadata":{"id":"H0XM-oIfhgQ7"},"source":["## Load the training data\n"]},{"cell_type":"markdown","metadata":{"id":"ZljJ25RAnj5x"},"source":["### (Optional) Load your own Pascal VOC dataset"]},{"cell_type":"markdown","metadata":{"id":"Ei5BahmPn_wR"},"source":["To use your custom dataset, you need to modify a few variables here, such as your ZIP filename, your label map, and the path to your images/annotations:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mz_suhWiqc7A"},"outputs":[],"source":["# Your labels map as a dictionary (zero is reserved):\n","label_map = {1: 'Cyclist'} "]},{"cell_type":"markdown","metadata":{"id":"d8Rh3IWRb0xw"},"source":["Now you're ready to train the model with your custom dataset. But before you run the notebook, you should also skip to the [Export to TensorFlow Lite](#scrollTo=_yB_XMpqGlLs) section and change the `TFLITE_FILENAME` and `LABLES_FILENAME` for your exported files.\n","\n","Then run the whole notebook by clicking **Runtime > Run all**."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KWROlVNA54xZ"},"outputs":[],"source":["# We need to instantiate a separate DataLoader for each split dataset\n","os.chdir('/content/drive/My Drive/STEM_1/dataset')\n","train_data = object_detector.DataLoader(tfrecord_file_patten='/content/drive/My Drive/STEM_1/dataset/onlybike/train1.record', size=12000, label_map=label_map)\n","validation_data = object_detector.DataLoader(\n","      '/content/drive/My Drive/STEM_1/dataset/onlybike/test1.record', size=1000, label_map=label_map)"]},{"cell_type":"markdown","metadata":{"id":"S8clx0KPutCM"},"source":["## Select the model spec"]},{"cell_type":"markdown","metadata":{"id":"vn61LJ9QbOPi"},"source":["Model Maker supports the EfficientDet-Lite family of object detection models that are compatible with the Edge TPU. (EfficientDet-Lite is derived from [EfficientDet](https://ai.googleblog.com/2020/04/efficientdet-towards-scalable-and.html), which offers state-of-the-art accuracy in a small model size). There are several model sizes you can choose from:\n","\n","|| Model architecture | Size(MB)* | Latency(ms)** | Average Precision*** |\n","|-|--------------------|-----------|---------------|----------------------|\n","|| EfficientDet-Lite0 | 5.7       | 37.4            | 30.4%               |\n","|| EfficientDet-Lite1 | 7.6       | 56.3            | 34.3%               |\n","|| EfficientDet-Lite2 | 10.2      | 104.6           | 36.0%               |\n","|| EfficientDet-Lite3 | 14.4      | 107.6           | 39.4%               |\n","| <td colspan=4><br><i>* File size of the compiled Edge TPU models. <br/>** Latency measured on a desktop CPU with a Coral USB Accelerator. <br/>*** Average Precision is the mAP (mean Average Precision) on the COCO 2017 validation dataset.</i></td> |\n","\n","Beware that the Lite2 and Lite3 models do not fit onto the Edge TPU's onboard memory, so you'll see even greater latency when using those, due to the cost of fetching data from the host system memory. Maybe this extra latency is okay for your application, but if it's not and you require the precision of the larger models, then you can [pipeline the model across multiple Edge TPUs](https://coral.ai/docs/edgetpu/pipeline/) (more about this when we compile the model below)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SM9gePHw9Jv1"},"outputs":[],"source":["spec = object_detector.EfficientDetLite2Spec(model_dir='/content/drive/My Drive/STEM_1/dataset/try4/last_layers')"]},{"cell_type":"markdown","metadata":{"id":"rnCzdzs0-Rbo"},"source":["The [`EfficientDetLite0Spec`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/EfficientDetLite0Spec) constructor also supports several arguments that specify training options, such as the max number of detections (default is 25 for the TF Lite model) and whether to use Cloud TPUs for training. You can also use the constructor to specify the number of training epochs and the batch size, but you can also specify those in the next step."]},{"cell_type":"code","source":["spec.config.var_freeze_expr = '(efficientnet|fpn_cells|resample_p6)'"],"metadata":{"id":"N4dujr--g8ap"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5qjq2UEHCLUi"},"source":["## Create and train the model"]},{"cell_type":"markdown","metadata":{"id":"2uZkLR6N6gDR"},"source":["Now we need to create our model according to the model spec, load our dataset into the model, specify training parameters, and begin training. \n","\n","Using Model Maker, we accomplished all of that with [`create()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/create):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kwlYdTcg63xy","colab":{"base_uri":"https://localhost:8080/"},"outputId":"fffec9c3-3ffe-468e-d13e-f8b804e253a1","executionInfo":{"status":"ok","timestamp":1668869527512,"user_tz":300,"elapsed":4335619,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","1500/1500 [==============================] - 251s 148ms/step - det_loss: 0.3704 - cls_loss: 0.2286 - box_loss: 0.0028 - reg_l2_loss: 0.0050 - loss: 0.3754 - learning_rate: 0.0090 - gradient_norm: 1.2665\n","Epoch 2/20\n","1500/1500 [==============================] - 201s 134ms/step - det_loss: 0.2757 - cls_loss: 0.1798 - box_loss: 0.0019 - reg_l2_loss: 0.0052 - loss: 0.2809 - learning_rate: 0.0098 - gradient_norm: 1.0869\n","Epoch 3/20\n","1500/1500 [==============================] - 220s 147ms/step - det_loss: 0.2708 - cls_loss: 0.1761 - box_loss: 0.0019 - reg_l2_loss: 0.0054 - loss: 0.2762 - learning_rate: 0.0096 - gradient_norm: 1.0333\n","Epoch 4/20\n","1500/1500 [==============================] - 216s 144ms/step - det_loss: 0.2509 - cls_loss: 0.1669 - box_loss: 0.0017 - reg_l2_loss: 0.0055 - loss: 0.2564 - learning_rate: 0.0092 - gradient_norm: 0.9795\n","Epoch 5/20\n","1500/1500 [==============================] - 203s 135ms/step - det_loss: 0.2485 - cls_loss: 0.1656 - box_loss: 0.0017 - reg_l2_loss: 0.0057 - loss: 0.2541 - learning_rate: 0.0087 - gradient_norm: 0.9589\n","Epoch 6/20\n","1500/1500 [==============================] - 224s 149ms/step - det_loss: 0.2507 - cls_loss: 0.1661 - box_loss: 0.0017 - reg_l2_loss: 0.0058 - loss: 0.2565 - learning_rate: 0.0081 - gradient_norm: 0.9388\n","Epoch 7/20\n","1500/1500 [==============================] - 214s 143ms/step - det_loss: 0.2384 - cls_loss: 0.1598 - box_loss: 0.0016 - reg_l2_loss: 0.0059 - loss: 0.2443 - learning_rate: 0.0074 - gradient_norm: 0.9258\n","Epoch 8/20\n","1500/1500 [==============================] - 202s 134ms/step - det_loss: 0.2362 - cls_loss: 0.1588 - box_loss: 0.0015 - reg_l2_loss: 0.0059 - loss: 0.2421 - learning_rate: 0.0066 - gradient_norm: 0.9133\n","Epoch 9/20\n","1500/1500 [==============================] - 229s 153ms/step - det_loss: 0.2382 - cls_loss: 0.1591 - box_loss: 0.0016 - reg_l2_loss: 0.0060 - loss: 0.2442 - learning_rate: 0.0058 - gradient_norm: 0.9107\n","Epoch 10/20\n","1500/1500 [==============================] - 210s 140ms/step - det_loss: 0.2307 - cls_loss: 0.1561 - box_loss: 0.0015 - reg_l2_loss: 0.0060 - loss: 0.2367 - learning_rate: 0.0050 - gradient_norm: 0.9096\n","Epoch 11/20\n","1500/1500 [==============================] - 212s 141ms/step - det_loss: 0.2312 - cls_loss: 0.1556 - box_loss: 0.0015 - reg_l2_loss: 0.0060 - loss: 0.2372 - learning_rate: 0.0042 - gradient_norm: 0.9127\n","Epoch 12/20\n","1500/1500 [==============================] - 224s 149ms/step - det_loss: 0.2275 - cls_loss: 0.1534 - box_loss: 0.0015 - reg_l2_loss: 0.0060 - loss: 0.2335 - learning_rate: 0.0034 - gradient_norm: 0.9071\n","Epoch 13/20\n","1500/1500 [==============================] - 206s 137ms/step - det_loss: 0.2238 - cls_loss: 0.1522 - box_loss: 0.0014 - reg_l2_loss: 0.0060 - loss: 0.2299 - learning_rate: 0.0026 - gradient_norm: 0.9128\n","Epoch 14/20\n","1500/1500 [==============================] - 218s 145ms/step - det_loss: 0.2270 - cls_loss: 0.1530 - box_loss: 0.0015 - reg_l2_loss: 0.0060 - loss: 0.2330 - learning_rate: 0.0019 - gradient_norm: 0.9142\n","Epoch 15/20\n","1500/1500 [==============================] - 225s 150ms/step - det_loss: 0.2192 - cls_loss: 0.1497 - box_loss: 0.0014 - reg_l2_loss: 0.0060 - loss: 0.2253 - learning_rate: 0.0013 - gradient_norm: 0.9054\n","Epoch 16/20\n","1500/1500 [==============================] - 203s 136ms/step - det_loss: 0.2223 - cls_loss: 0.1518 - box_loss: 0.0014 - reg_l2_loss: 0.0060 - loss: 0.2284 - learning_rate: 8.1894e-04 - gradient_norm: 0.9217\n","Epoch 17/20\n","1500/1500 [==============================] - 216s 144ms/step - det_loss: 0.2276 - cls_loss: 0.1533 - box_loss: 0.0015 - reg_l2_loss: 0.0060 - loss: 0.2337 - learning_rate: 4.2635e-04 - gradient_norm: 0.9293\n","Epoch 18/20\n","1500/1500 [==============================] - 220s 147ms/step - det_loss: 0.2201 - cls_loss: 0.1501 - box_loss: 0.0014 - reg_l2_loss: 0.0060 - loss: 0.2261 - learning_rate: 1.5853e-04 - gradient_norm: 0.9286\n","Epoch 19/20\n","1500/1500 [==============================] - 204s 136ms/step - det_loss: 0.2213 - cls_loss: 0.1504 - box_loss: 0.0014 - reg_l2_loss: 0.0060 - loss: 0.2273 - learning_rate: 2.2759e-05 - gradient_norm: 0.9431\n","Epoch 20/20\n","1500/1500 [==============================] - 216s 144ms/step - det_loss: 0.2300 - cls_loss: 0.1542 - box_loss: 0.0015 - reg_l2_loss: 0.0060 - loss: 0.2360 - learning_rate: 2.2759e-05 - gradient_norm: 0.9647\n"]}],"source":["model = object_detector.create(train_data=train_data, \n","                               model_spec=spec, \n","                               epochs=20, \n","                               batch_size=8, \n","                               train_whole_model=False)"]},{"cell_type":"markdown","metadata":{"id":"3n5-o3vvGfnJ"},"source":["## Evaluate the model"]},{"cell_type":"markdown","metadata":{"id":"-BzCHLWJ6h7q"},"source":["Now we'll use the test dataset to evaluate how well the model performs with data it has never seen before.\n","\n","The [`evaluate()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#evaluate) method provides output in the style of [COCO evaluation metrics](https://cocodataset.org/#detection-eval):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8xmnl6Yy7ARn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668870045491,"user_tz":300,"elapsed":30475,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"824c9e2e-0004-408f-c0a2-6118f639b33b"},"outputs":[{"output_type":"stream","name":"stdout","text":["12/16 [=====================>........] - ETA: 2s\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AP': 0.77642953,\n"," 'AP50': 0.9714287,\n"," 'AP75': 0.90911853,\n"," 'APs': 0.013333334,\n"," 'APm': 0.46575785,\n"," 'APl': 0.7975721,\n"," 'ARmax1': 0.46698046,\n"," 'ARmax10': 0.8257784,\n"," 'ARmax100': 0.844895,\n"," 'ARs': 0.2,\n"," 'ARm': 0.67706424,\n"," 'ARl': 0.85979545,\n"," 'AP_/Cyclist': 0.77642953}"]},"metadata":{},"execution_count":14}],"source":["model.evaluate(validation_data)"]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3A4Sd8ICZ1NY","executionInfo":{"status":"ok","timestamp":1668870006362,"user_tz":300,"elapsed":295,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"efe7dad1-98dc-4ba2-e401-2b8783efeadb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," keras_layer (KerasLayer)    multiple                  5227280   \n","                                                                 \n"," class_net/class-predict (Se  multiple                 3042      \n"," parableConv2D)                                                  \n","                                                                 \n"," box_net/box-predict (Separa  multiple                 5076      \n"," bleConv2D)                                                      \n","                                                                 \n","=================================================================\n","Total params: 5,235,398\n","Trainable params: 5,162,838\n","Non-trainable params: 72,560\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"PEon9xd2BDS_"},"source":["Because the default batch size for [EfficientDetLite models](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/EfficientDetSpec) is 64, this needs only 1 step to go through all 25 images in the salad test set. You can also specify the `batch_size` argument when you call [`evaluate()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#evaluate)."]},{"cell_type":"markdown","metadata":{"id":"_yB_XMpqGlLs"},"source":["## Export to TensorFlow Lite"]},{"cell_type":"markdown","metadata":{"id":"CgCDMe0e6jlT"},"source":["Next, we'll export the model to the TensorFlow Lite format. By default, the [`export()`](https://www.tensorflow.org/lite/api_docs/python/tflite_model_maker/object_detector/ObjectDetector#export) method performs [full integer post-training quantization](https://www.tensorflow.org/lite/performance/post_training_quantization#full_integer_quantization), which is exactly what we need for compatibility with the Edge TPU. (Model Maker uses the same dataset we gave to our model spec as a representative dataset, which is required for full-int quantization.)\n","\n","We just need to specify the export directory and format. By default, it exports to TF Lite, but we also want a labels file, so we declare both:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2Cu9cxX5Qu-e"},"outputs":[],"source":["TFLITE_FILENAME = 'efficientdet-lite-bikes.tflite'\n","LABELS_FILENAME = 'bikes-labels.txt'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rKd6qk7TbxYO"},"outputs":[],"source":["model.export(export_dir='/content/drive/My Drive/STEM_1/dataset/try4', tflite_filename=TFLITE_FILENAME, label_filename=LABELS_FILENAME,\n","             export_format=[ExportFormat.TFLITE, ExportFormat.LABEL])"]},{"cell_type":"markdown","metadata":{"id":"b94hZ-exOCRB"},"source":["### Evaluate the TF Lite model"]},{"cell_type":"markdown","metadata":{"id":"ZQpahAIBqBPp"},"source":["Exporting the model to TensorFlow Lite can affect the model accuracy, due to the reduced numerical precision from quantization and because the original TensorFlow model uses per-class [non-max supression (NMS)](https://www.coursera.org/lecture/convolutional-neural-networks/non-max-suppression-dvrjH) for post-processing, while the TF Lite model uses global NMS, which is faster but less accurate.\n","\n","Therefore you should always evaluate the exported TF Lite model and be sure it still meets your requirements:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RS3Ell_lqH4e","colab":{"base_uri":"https://localhost:8080/","height":328},"executionInfo":{"status":"error","timestamp":1668869985530,"user_tz":300,"elapsed":49987,"user":{"displayName":"Charles Tang","userId":"08254346733793913295"}},"outputId":"25a6ad9a-b92f-4643-e02c-1d0e46088c1e"},"outputs":[{"output_type":"stream","name":"stdout","text":["   4/1000 [..............................] - ETA: 2:40:15"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-0b2c41feefbc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_tflite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/drive/My Drive/STEM_1/dataset/try4/\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mTFLITE_FILENAME\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_examples/lite/model_maker/core/task/object_detector.py\u001b[0m in \u001b[0;36mevaluate_tflite\u001b[0;34m(self, tflite_filepath, data)\u001b[0m\n\u001b[1;32m    154\u001b[0m     \u001b[0mds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_spec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_training\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m     return self.model_spec.evaluate_tflite(tflite_filepath, ds, len(data),\n\u001b[0;32m--> 156\u001b[0;31m                                            data.annotations_json_file)\n\u001b[0m\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_export_saved_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaved_model_dir\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_examples/lite/model_maker/core/task/model_spec/object_detector_spec.py\u001b[0m in \u001b[0;36mevaluate_tflite\u001b[0;34m(self, tflite_filepath, dataset, steps, json_file)\u001b[0m\n\u001b[1;32m    375\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    376\u001b[0m       \u001b[0;31m# Get the output result after post-processing NMS op.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 377\u001b[0;31m       \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnms_scores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnms_classes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnms_boxes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlite_runner\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    379\u001b[0m       \u001b[0;31m# CLASS_OFFSET is used since label_id for `background` is 0 in label_map\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_examples/lite/model_maker/third_party/efficientdet/keras/eval_tflite.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, image)\u001b[0m\n\u001b[1;32m     91\u001b[0m       \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_detail\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'dtype'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignature_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/lite/python/interpreter.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    256\u001b[0m                                           self._subgraph_index)\n\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 258\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interpreter_wrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInvoke\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_subgraph_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    259\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0moutput_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_index\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_outputs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["model.evaluate_tflite(\"/content/drive/My Drive/STEM_1/dataset/try4/\"+TFLITE_FILENAME, validation_data)"]},{"cell_type":"markdown","metadata":{"id":"Ph88z7PdOeX7"},"source":["### Try the TFLite model"]},{"cell_type":"markdown","metadata":{"id":"me6_RwPZqNhX"},"source":["Just to be sure of things, let's run the model ourselves with an image from the test set. "]},{"cell_type":"markdown","metadata":{"id":"ZBecI78ZaxsO"},"source":["To simplify our code, we'll use the [PyCoral API](https://coral.ai/docs/reference/py/):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TmgtGBqua1N3"},"outputs":[],"source":["! python3 -m pip install --extra-index-url https://google-coral.github.io/py-repo/ pycoral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GkXtipXKqXp4"},"outputs":[],"source":["from PIL import Image\n","from PIL import ImageDraw\n","from PIL import ImageFont\n","\n","import tflite_runtime.interpreter as tflite \n","from pycoral.adapters import common\n","from pycoral.adapters import detect\n","from pycoral.utils.dataset import read_label_file\n","\n","def draw_objects(draw, objs, scale_factor, labels):\n","  \"\"\"Draws the bounding box and label for each object.\"\"\"\n","  COLORS = np.random.randint(0, 255, size=(len(labels), 3), dtype=np.uint8)\n","  for obj in objs:\n","    bbox = obj.bbox\n","    color = tuple(int(c) for c in COLORS[obj.id])\n","    draw.rectangle([(bbox.xmin * scale_factor, bbox.ymin * scale_factor),\n","                    (bbox.xmax * scale_factor, bbox.ymax * scale_factor)],\n","                   outline=color, width=3)\n","    font = ImageFont.truetype(\"LiberationSans-Regular.ttf\", size=15)\n","    draw.text((bbox.xmin * scale_factor + 4, bbox.ymin * scale_factor + 4),\n","              '%s\\n%.2f' % (labels.get(obj.id, obj.id), obj.score),\n","              fill=color, font=font)\n","\n","# Load the TF Lite model\n","labels = read_label_file('/content/drive/My Drive/STEM_1/dataset/export/' + LABELS_FILENAME)\n","interpreter = tflite.Interpreter('/content/drive/My Drive/STEM_1/dataset/export/' + TFLITE_FILENAME)\n","interpreter.allocate_tensors()\n","\n","# Resize the image for input\n","image = Image.open('/content/drive/My Drive/bike2.jpg')\n","_, scale = common.set_resized_input(\n","    interpreter, image.size, lambda size: image.resize(size, Image.ANTIALIAS))\n","\n","# Run inference\n","interpreter.invoke()\n","objs = detect.get_objects(interpreter, score_threshold=0.2, image_scale=scale)\n","\n","# Resize again to a reasonable size for display\n","display_width = 500\n","scale_factor = display_width / image.width\n","height_ratio = image.height / image.width\n","image = image.resize((display_width, int(display_width * height_ratio)))\n","draw_objects(ImageDraw.Draw(image), objs, scale_factor, labels)\n","image"]},{"cell_type":"markdown","metadata":{"id":"oxgWQyYOqZha"},"source":["## Compile for the Edge TPU\n"]},{"cell_type":"markdown","metadata":{"id":"A0QLiwCj9Pw6"},"source":["First we need to download the Edge TPU Compiler:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Oy3QIn_YqaRP"},"outputs":[],"source":["! curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n","\n","! echo \"deb https://packages.cloud.google.com/apt coral-edgetpu-stable main\" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list\n","\n","! sudo apt-get update\n","\n","! sudo apt-get install edgetpu-compiler"]},{"cell_type":"markdown","metadata":{"id":"qRWewhqFqeL_"},"source":["Before compiling the `.tflite` file for the Edge TPU, it's important to consider whether your model will fit into the Edge TPU memory. \n","\n","The Edge TPU has approximately 8 MB of SRAM for [caching model paramaters](https://coral.ai/docs/edgetpu/compiler/#parameter-data-caching), so any model close to or over 8 MB will not fit onto the Edge TPU memory. That means the inference times are longer, because some model parameters must be fetched from the host system memory.\n","\n","One way to elimiate the extra latency is to use [model pipelining](https://coral.ai/docs/edgetpu/pipeline/), which splits the model into segments that can run on separate Edge TPUs in series. This can significantly reduce the latency for big models.\n","\n","The following table provides recommendations for the number of Edge TPUs to use with each EfficientDet-Lite model.\n","\n","| Model architecture | Minimum TPUs | Recommended TPUs\n","|--------------------|-------|-------|\n","| EfficientDet-Lite0 | 1     | 1     |\n","| EfficientDet-Lite1 | 1     | 1     |\n","| EfficientDet-Lite2 | 1     | 2     |\n","| EfficientDet-Lite3 | 2     | 2     |\n","| EfficientDet-Lite4 | 2     | 3     |\n","\n","If you need extra Edge TPUs for your model, then update `NUMBER_OF_TPUS` here:"]},{"cell_type":"code","source":["TFLITE_FILENAME = '/content/drive/My Drive/STEM_1/dataset/export/efficientdet-lite-bikes.tflite'\n","NUMBER_OF_TPUS = 1"],"metadata":{"id":"GSnkSl8_JYjS"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LZdonJGCqieU"},"outputs":[],"source":["!edgetpu_compiler $TFLITE_FILENAME -d --num_segments=$NUMBER_OF_TPUS"]},{"cell_type":"markdown","metadata":{"id":"O2CjkduY02DF"},"source":["**Beware when using multiple segments:** The Edge TPU Comiler divides the model such that all segments have roughly equal amounts of parameter data, but that does not mean all segments have the same latency. Especially when dividing an SSD model such as EfficientDet, this results in a latency-imbalance between segments, because SSD models have a large post-processing op that actually executes on the CPU, not on the Edge TPU. So although segmenting your model this way is better than running the whole model on just one Edge TPU, we recommend that you segment the EfficientDet-Lite model using our [profiling-based partitioner tool](https://github.com/google-coral/libcoral/tree/master/coral/tools/partitioner#profiling-based-partitioner-for-the-edge-tpu-compiler), which measures each segment's latency on the Edge TPU and then iteratively adjusts the segmentation sizes to provide balanced latency between all segments."]},{"cell_type":"markdown","metadata":{"id":"KyBBvyqx0XRn"},"source":["## Download the files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M43URVgg0ZcB"},"outputs":[],"source":["from google.colab import files\n","TFLITE_FILENAME = 'efficientdet-lite-bikes.tflite'\n","files.download(TFLITE_FILENAME)\n","files.download(TFLITE_FILENAME.replace('.tflite', '_edgetpu.tflite'))\n","files.download(LABELS_FILENAME)"]},{"cell_type":"markdown","metadata":{"id":"8fYwl4Rt8myF"},"source":["## Run the model on the Edge TPU"]},{"cell_type":"markdown","metadata":{"id":"Dv2Ingvx8pcI"},"source":["You can now run the model with acceleration on the Edge TPU.\n","\n","First, download an image of a salad on your device with an Edge TPU. For example, you can use the same one we tested above: \n","\n","```\n","wget https://storage.googleapis.com/cloud-ml-data/img/openimage/3/2520/3916261642_0a504acd60_o.jpg -O salad.jpg\n","```\n","\n","And then make sure you have [installed the PyCoral API](https://coral.ai/software/#pycoral-api).\n","\n","Now run an inference using [this example code for the PyCoral API](https://github.com/google-coral/pycoral/blob/master/examples/detect_image.py). Just clone the GitHub repo and run the example, passing it the model files from this tutorial:\n","\n","```\n","git clone https://github.com/google-coral/pycoral\n","\n","cd pycoral/examples/\n","\n","python3 detect_image.py \\\n","  --model efficientdet-lite-salads_edgetpu.tflite \\\n","  --labels salad-labels.txt \\\n","  --input salad.jpg \\\n","  --output salad_result.jpg\n","```\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1DRNsZW-6-CQsR7p0i_49Z1dolM_8xyPN","timestamp":1667792635346},{"file_id":"https://github.com/google-coral/tutorials/blob/master/retrain_efficientdet_model_maker_tf2.ipynb","timestamp":1667756742492}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"gpuClass":"premium","accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}